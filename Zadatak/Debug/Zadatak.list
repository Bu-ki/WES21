
Zadatak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00021978  2**0
                  CONTENTS
  4 .ARM          00000008  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046fc  080046fc  00021978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001978  20000000  08004704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021978  2**0
                  CONTENTS
 10 .bss          00000120  20001978  20001978  00021978  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001a98  20001a98  00021978  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021978  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001148a  00000000  00000000  000219a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002717  00000000  00000000  00032e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  00036150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022103  00000000  00000000  00036c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d44  00000000  00000000  00058d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6b74  00000000  00000000  0006aab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013162b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000303c  00000000  00000000  00131680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001978 	.word	0x20001978
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b4 	.word	0x080046b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000197c 	.word	0x2000197c
 80001c4:	080046b4 	.word	0x080046b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <init_AudioReset>:
#include "audio.h"
#include "gpio.h"
#include "i2c.h"
#include "i2s.h"

void init_AudioReset () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD , AUDIO_RESET_PIN , GPIO_PIN_SET );
 80004c4:	2201      	movs	r2, #1
 80004c6:	2110      	movs	r1, #16
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <init_AudioReset+0x14>)
 80004ca:	f001 f97b 	bl	80017c4 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <configAudio>:

void configAudio () {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af02      	add	r7, sp, #8
uint8_t bytes [2];
init_AudioReset ();
 80004de:	f7ff ffef 	bl	80004c0 <init_AudioReset>

/** Power sequence **/
// Set Power Control Register to "on" state
bytes [0] = 0x02;
 80004e2:	2302      	movs	r3, #2
 80004e4:	713b      	strb	r3, [r7, #4]
bytes [1] = 0x01;
 80004e6:	2301      	movs	r3, #1
 80004e8:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit (&hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80004ea:	1d3a      	adds	r2, r7, #4
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2302      	movs	r3, #2
 80004f2:	2194      	movs	r1, #148	; 0x94
 80004f4:	486f      	ldr	r0, [pc, #444]	; (80006b4 <configAudio+0x1dc>)
 80004f6:	f001 fac3 	bl	8001a80 <HAL_I2C_Master_Transmit>

 /** Initialization sequence **/
bytes [0] = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x99;
 80004fe:	2399      	movs	r3, #153	; 0x99
 8000500:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (&hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000502:	1d3a      	adds	r2, r7, #4
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2302      	movs	r3, #2
 800050a:	2194      	movs	r1, #148	; 0x94
 800050c:	4869      	ldr	r0, [pc, #420]	; (80006b4 <configAudio+0x1dc>)
 800050e:	f001 fab7 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x47;
 8000512:	2347      	movs	r3, #71	; 0x47
 8000514:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x80;
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800051a:	1d3a      	adds	r2, r7, #4
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2302      	movs	r3, #2
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4863      	ldr	r0, [pc, #396]	; (80006b4 <configAudio+0x1dc>)
 8000526:	f001 faab 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x32;
 800052a:	2332      	movs	r3, #50	; 0x32
 800052c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x80;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000532:	1d3a      	adds	r2, r7, #4
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	2194      	movs	r1, #148	; 0x94
 800053c:	485d      	ldr	r0, [pc, #372]	; (80006b4 <configAudio+0x1dc>)
 800053e:	f001 fa9f 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x32;
 8000542:	2332      	movs	r3, #50	; 0x32
 8000544:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x0;
 8000546:	2300      	movs	r3, #0
 8000548:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	2364      	movs	r3, #100	; 0x64
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2302      	movs	r3, #2
 8000552:	2194      	movs	r1, #148	; 0x94
 8000554:	4857      	ldr	r0, [pc, #348]	; (80006b4 <configAudio+0x1dc>)
 8000556:	f001 fa93 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	713b      	strb	r3, [r7, #4]
bytes [1] = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000562:	1d3a      	adds	r2, r7, #4
 8000564:	2364      	movs	r3, #100	; 0x64
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2302      	movs	r3, #2
 800056a:	2194      	movs	r1, #148	; 0x94
 800056c:	4851      	ldr	r0, [pc, #324]	; (80006b4 <configAudio+0x1dc>)
 800056e:	f001 fa87 	bl	8001a80 <HAL_I2C_Master_Transmit>

/** Ctl registers configuration **/
bytes [0] = 0x04;
 8000572:	2304      	movs	r3, #4
 8000574:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0xAF;
 8000576:	23af      	movs	r3, #175	; 0xaf
 8000578:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800057a:	1d3a      	adds	r2, r7, #4
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2302      	movs	r3, #2
 8000582:	2194      	movs	r1, #148	; 0x94
 8000584:	484b      	ldr	r0, [pc, #300]	; (80006b4 <configAudio+0x1dc>)
 8000586:	f001 fa7b 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x0D;
 800058a:	230d      	movs	r3, #13
 800058c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x70;
 800058e:	2370      	movs	r3, #112	; 0x70
 8000590:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000592:	1d3a      	adds	r2, r7, #4
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	2194      	movs	r1, #148	; 0x94
 800059c:	4845      	ldr	r0, [pc, #276]	; (80006b4 <configAudio+0x1dc>)
 800059e:	f001 fa6f 	bl	8001a80 <HAL_I2C_Master_Transmit>

bytes [0] = 0x05;
 80005a2:	2305      	movs	r3, #5
 80005a4:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x81;
 80005a6:	2381      	movs	r3, #129	; 0x81
 80005a8:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2302      	movs	r3, #2
 80005b2:	2194      	movs	r1, #148	; 0x94
 80005b4:	483f      	ldr	r0, [pc, #252]	; (80006b4 <configAudio+0x1dc>)
 80005b6:	f001 fa63 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x06;
 80005ba:	2306      	movs	r3, #6
 80005bc:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x07;
 80005be:	2307      	movs	r3, #7
 80005c0:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	2194      	movs	r1, #148	; 0x94
 80005cc:	4839      	ldr	r0, [pc, #228]	; (80006b4 <configAudio+0x1dc>)
 80005ce:	f001 fa57 	bl	8001a80 <HAL_I2C_Master_Transmit>

bytes [0] = 0x0A;
 80005d2:	230a      	movs	r3, #10
 80005d4:	713b      	strb	r3, [r7, #4]
bytes [1] = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2302      	movs	r3, #2
 80005e2:	2194      	movs	r1, #148	; 0x94
 80005e4:	4833      	ldr	r0, [pc, #204]	; (80006b4 <configAudio+0x1dc>)
 80005e6:	f001 fa4b 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x27;
 80005ea:	2327      	movs	r3, #39	; 0x27
 80005ec:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	2194      	movs	r1, #148	; 0x94
 80005fc:	482d      	ldr	r0, [pc, #180]	; (80006b4 <configAudio+0x1dc>)
 80005fe:	f001 fa3f 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x1F;
 8000602:	231f      	movs	r3, #31
 8000604:	713b      	strb	r3, [r7, #4]

bytes [1] = 0x0F;
 8000606:	230f      	movs	r3, #15
 8000608:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	2194      	movs	r1, #148	; 0x94
 8000614:	4827      	ldr	r0, [pc, #156]	; (80006b4 <configAudio+0x1dc>)
 8000616:	f001 fa33 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x22;
 800061a:	2322      	movs	r3, #34	; 0x22
 800061c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0xC0;
 800061e:	23c0      	movs	r3, #192	; 0xc0
 8000620:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2302      	movs	r3, #2
 800062a:	2194      	movs	r1, #148	; 0x94
 800062c:	4821      	ldr	r0, [pc, #132]	; (80006b4 <configAudio+0x1dc>)
 800062e:	f001 fa27 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x14;
 8000632:	2314      	movs	r3, #20
 8000634:	713b      	strb	r3, [r7, #4]
 bytes [1] = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2302      	movs	r3, #2
 8000642:	2194      	movs	r1, #148	; 0x94
 8000644:	481b      	ldr	r0, [pc, #108]	; (80006b4 <configAudio+0x1dc>)
 8000646:	f001 fa1b 	bl	8001a80 <HAL_I2C_Master_Transmit>

bytes [0] = 0x15;
 800064a:	2315      	movs	r3, #21
 800064c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	2194      	movs	r1, #148	; 0x94
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <configAudio+0x1dc>)
 800065e:	f001 fa0f 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x20;
 8000662:	2320      	movs	r3, #32
 8000664:	713b      	strb	r3, [r7, #4]
 bytes [1] = 24;
 8000666:	2318      	movs	r3, #24
 8000668:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800066a:	1d3a      	adds	r2, r7, #4
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2302      	movs	r3, #2
 8000672:	2194      	movs	r1, #148	; 0x94
 8000674:	480f      	ldr	r0, [pc, #60]	; (80006b4 <configAudio+0x1dc>)
 8000676:	f001 fa03 	bl	8001a80 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x21;
 800067a:	2321      	movs	r3, #33	; 0x21
 800067c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 24;
 800067e:	2318      	movs	r3, #24
 8000680:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2302      	movs	r3, #2
 800068a:	2194      	movs	r1, #148	; 0x94
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <configAudio+0x1dc>)
 800068e:	f001 f9f7 	bl	8001a80 <HAL_I2C_Master_Transmit>

 /** Power up **/
 bytes [0] = 0x02;
 8000692:	2302      	movs	r3, #2
 8000694:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x9E;
 8000696:	239e      	movs	r3, #158	; 0x9e
 8000698:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2302      	movs	r3, #2
 80006a2:	2194      	movs	r1, #148	; 0x94
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <configAudio+0x1dc>)
 80006a6:	f001 f9eb 	bl	8001a80 <HAL_I2C_Master_Transmit>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001998 	.word	0x20001998

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0xd4>)
 8000760:	f001 f830 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000764:	2310      	movs	r3, #16
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077c:	f000 fe86 	bl	800148c <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020c00 	.word	0x40020c00

08000790 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_I2C1_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x50>)
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x58>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ce:	f001 f813 	bl	80017f8 <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 fa64 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20001998 	.word	0x20001998
 80007e4:	40005400 	.word	0x40005400
 80007e8:	000186a0 	.word	0x000186a0

080007ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_I2C_MspInit+0x84>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d12c      	bne.n	8000868 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800082a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000830:	2312      	movs	r3, #18
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083c:	2304      	movs	r3, #4
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <HAL_I2C_MspInit+0x8c>)
 8000848:	f000 fe20 	bl	800148c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_I2C_MspInit+0x88>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40005400 	.word	0x40005400
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400

0800087c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <MX_I2S3_Init+0x58>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_I2S3_Init+0x54>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008a4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008be:	f001 fbe7 	bl	8002090 <HAL_I2S_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80008c8:	f000 f9ec 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200019ec 	.word	0x200019ec
 80008d4:	40003c00 	.word	0x40003c00

080008d8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <HAL_I2S_MspInit+0xf0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d15a      	bne.n	80009be <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000908:	2301      	movs	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800090c:	23c0      	movs	r3, #192	; 0xc0
 800090e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fdf7 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000924:	f000 f9be 	bl	8000ca4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800097c:	2310      	movs	r3, #16
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <HAL_I2S_MspInit+0xf8>)
 8000998:	f000 fd78 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800099c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <HAL_I2S_MspInit+0xfc>)
 80009ba:	f000 fd67 	bl	800148c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009be:	bf00      	nop
 80009c0:	3738      	adds	r7, #56	; 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800

080009d8 <playTune>:
			i = 0;
		}
	}
}

void playTune(char c){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	uint16_t signal ;

	int i = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
	int duration = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
	uint16_t *polje;
	int lenPolje;

	if (c == 'a') { lenPolje = TonC; polje = poljeC;}
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b61      	cmp	r3, #97	; 0x61
 80009ee:	d105      	bne.n	80009fc <playTune+0x24>
 80009f0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <playTune+0x12c>)
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e078      	b.n	8000aee <playTune+0x116>
	else if(c == 'w') { lenPolje = TonCs; polje = poljeCs; }
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b77      	cmp	r3, #119	; 0x77
 8000a00:	d105      	bne.n	8000a0e <playTune+0x36>
 8000a02:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <playTune+0x130>)
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e06f      	b.n	8000aee <playTune+0x116>
	else if(c == 's') { lenPolje = TonD; polje = poljeD; }
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b73      	cmp	r3, #115	; 0x73
 8000a12:	d105      	bne.n	8000a20 <playTune+0x48>
 8000a14:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <playTune+0x134>)
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e066      	b.n	8000aee <playTune+0x116>
	else if(c == 'e') { lenPolje = TonDs; polje = poljeDs; }
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b65      	cmp	r3, #101	; 0x65
 8000a24:	d105      	bne.n	8000a32 <playTune+0x5a>
 8000a26:	f44f 7399 	mov.w	r3, #306	; 0x132
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <playTune+0x138>)
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e05d      	b.n	8000aee <playTune+0x116>
	else if(c == 'd') { lenPolje = TonE; polje = poljeE; }
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d105      	bne.n	8000a44 <playTune+0x6c>
 8000a38:	f240 1321 	movw	r3, #289	; 0x121
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <playTune+0x13c>)
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e054      	b.n	8000aee <playTune+0x116>
	else if(c == 'f') { lenPolje = TonF; polje = poljeF; }
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b66      	cmp	r3, #102	; 0x66
 8000a48:	d105      	bne.n	8000a56 <playTune+0x7e>
 8000a4a:	f240 1311 	movw	r3, #273	; 0x111
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <playTune+0x140>)
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e04b      	b.n	8000aee <playTune+0x116>
	else if(c == 't') { lenPolje = TonFs; polje = poljeFs; }
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b74      	cmp	r3, #116	; 0x74
 8000a5a:	d105      	bne.n	8000a68 <playTune+0x90>
 8000a5c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <playTune+0x144>)
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e042      	b.n	8000aee <playTune+0x116>
	else if(c == 'g') { lenPolje = TonG; polje = poljeG; }
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b67      	cmp	r3, #103	; 0x67
 8000a6c:	d104      	bne.n	8000a78 <playTune+0xa0>
 8000a6e:	23f3      	movs	r3, #243	; 0xf3
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <playTune+0x148>)
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e03a      	b.n	8000aee <playTune+0x116>
	else if(c == 'z') { lenPolje = TonGs; polje = poljeGs; }
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b7a      	cmp	r3, #122	; 0x7a
 8000a7c:	d104      	bne.n	8000a88 <playTune+0xb0>
 8000a7e:	23e6      	movs	r3, #230	; 0xe6
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <playTune+0x14c>)
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e032      	b.n	8000aee <playTune+0x116>
	else if(c == 'h') { lenPolje = TonA; polje = poljeA; }
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b68      	cmp	r3, #104	; 0x68
 8000a8c:	d104      	bne.n	8000a98 <playTune+0xc0>
 8000a8e:	23d9      	movs	r3, #217	; 0xd9
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <playTune+0x150>)
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e02a      	b.n	8000aee <playTune+0x116>
	else if(c == 'u') { lenPolje = TonAs; polje = poljeAs; }
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b75      	cmp	r3, #117	; 0x75
 8000a9c:	d104      	bne.n	8000aa8 <playTune+0xd0>
 8000a9e:	23cd      	movs	r3, #205	; 0xcd
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <playTune+0x154>)
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e022      	b.n	8000aee <playTune+0x116>
	else if(c == 'j') { lenPolje = TonH; polje = poljeH; }
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b6a      	cmp	r3, #106	; 0x6a
 8000aac:	d11f      	bne.n	8000aee <playTune+0x116>
 8000aae:	23c1      	movs	r3, #193	; 0xc1
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <playTune+0x158>)
 8000ab4:	617b      	str	r3, [r7, #20]


	while(duration < LOOPNUM){
 8000ab6:	e01a      	b.n	8000aee <playTune+0x116>
		// Ton
		signal = polje[i] * 2;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	4413      	add	r3, r2
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	81fb      	strh	r3, [r7, #14]
		// Sum
		//signal = rand ();
		HAL_I2S_Transmit (&hi2s3 , &signal , 1, 10) ;
 8000ac8:	f107 010e 	add.w	r1, r7, #14
 8000acc:	230a      	movs	r3, #10
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <playTune+0x15c>)
 8000ad2:	f001 fc1d 	bl	8002310 <HAL_I2S_Transmit>
		i++;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]

		if (i == lenPolje){
 8000adc:	69fa      	ldr	r2, [r7, #28]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d104      	bne.n	8000aee <playTune+0x116>
			i = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
			duration++;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3301      	adds	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
	while(duration < LOOPNUM){
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af4:	dbe0      	blt.n	8000ab8 <playTune+0xe0>
		}
	}
	signal = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	81fb      	strh	r3, [r7, #14]
}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000004 	.word	0x20000004
 8000b08:	200002dc 	.word	0x200002dc
 8000b0c:	2000058c 	.word	0x2000058c
 8000b10:	20000814 	.word	0x20000814
 8000b14:	20000a78 	.word	0x20000a78
 8000b18:	20000cbc 	.word	0x20000cbc
 8000b1c:	20000ee0 	.word	0x20000ee0
 8000b20:	200010e4 	.word	0x200010e4
 8000b24:	200012cc 	.word	0x200012cc
 8000b28:	20001498 	.word	0x20001498
 8000b2c:	2000164c 	.word	0x2000164c
 8000b30:	200017e8 	.word	0x200017e8
 8000b34:	200019ec 	.word	0x200019ec

08000b38 <checkString>:
int checkString(char c){
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	int num = 12;
 8000b42:	230c      	movs	r3, #12
 8000b44:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num; i++){
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e00c      	b.n	8000b66 <checkString+0x2e>
		if(c == keys[i]){
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <checkString+0x44>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d101      	bne.n	8000b60 <checkString+0x28>
			return 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e007      	b.n	8000b70 <checkString+0x38>
	for(int i = 0; i < num; i++){
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbee      	blt.n	8000b4c <checkString+0x14>
		}
	}
	return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20000000 	.word	0x20000000

08000b80 <main>:

int main ( void ) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	char c;

	HAL_Init();
 8000b86:	f000 fa39 	bl	8000ffc <HAL_Init>
	SystemClock_Config();
 8000b8a:	f000 f821 	bl	8000bd0 <SystemClock_Config>
	MX_GPIO_Init();
 8000b8e:	f7ff fd93 	bl	80006b8 <MX_GPIO_Init>
	MX_I2C1_Init ();
 8000b92:	f7ff fdfd 	bl	8000790 <MX_I2C1_Init>
	MX_I2S3_Init ();
 8000b96:	f7ff fe71 	bl	800087c <MX_I2S3_Init>

	MX_USART2_UART_Init ();
 8000b9a:	f000 f8f9 	bl	8000d90 <MX_USART2_UART_Init>

	configAudio ();
 8000b9e:	f7ff fc9b 	bl	80004d8 <configAudio>


	while (1) {

		USART2_Dequeue (&c);
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f9cb 	bl	8000f40 <USART2_Dequeue>

		if ( c != 0) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <main+0x38>
			USART2_SendChar (c);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f9b2 	bl	8000f1c <USART2_SendChar>

//		if (c == 'a'){
//			playTon();
//		}
		// awsedftghuj
		if (checkString(c)){
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffbc 	bl	8000b38 <checkString>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0ed      	beq.n	8000ba2 <main+0x22>
			playTune(c);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff05 	bl	80009d8 <playTune>
		USART2_Dequeue (&c);
 8000bce:	e7e8      	b.n	8000ba2 <main+0x22>

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2230      	movs	r2, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fd60 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <SystemClock_Config+0xcc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a27      	ldr	r2, [pc, #156]	; (8000c9c <SystemClock_Config+0xcc>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <SystemClock_Config+0xcc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	2310      	movs	r3, #16
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c44:	23a8      	movs	r3, #168	; 0xa8
 8000c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 ffe5 	bl	8002c24 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c60:	f000 f820 	bl	8000ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
 8000c66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2105      	movs	r1, #5
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fa46 	bl	8003114 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c8e:	f000 f809 	bl	8000ca4 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3750      	adds	r7, #80	; 0x50
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40007000 	.word	0x40007000

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f9a8 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <USART2_IRQHandler+0x14>)
 8000d5a:	f002 fdf7 	bl	800394c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler (&huart2 );
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART2_IRQHandler+0x14>)
 8000d60:	f000 f89a 	bl	8000e98 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20001a50 	.word	0x20001a50

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART2_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f002 fce0 	bl	800378c <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f7ff ff67 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001a50 	.word	0x20001a50
 8000de0:	40004400 	.word	0x40004400

08000de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d13b      	bne.n	8000e7e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0xa8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <HAL_UART_MspInit+0xac>)
 8000e5a:	f000 fb17 	bl	800148c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2026      	movs	r0, #38	; 0x26
 8000e64:	f000 fa3b 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f000 fa54 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
    __HAL_UART_ENABLE_IT (&huart2 , UART_IT_RXNE );
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_UART_MspInit+0xb0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_UART_MspInit+0xb0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0220 	orr.w	r2, r2, #32
 8000e7c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	20001a50 	.word	0x20001a50

08000e98 <USER_UART_IRQHandler>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler ( UART_HandleTypeDef *huart ) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
if( huart -> Instance == USART2 ) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <USER_UART_IRQHandler+0x6c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d125      	bne.n	8000ef6 <USER_UART_IRQHandler+0x5e>

rx_data = __HAL_UART_FLUSH_DRREGISTER ( huart );
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <USER_UART_IRQHandler+0x70>)
 8000eb4:	701a      	strb	r2, [r3, #0]

static char rx_head ;
rx_head = RX_BUFFER_HEAD + 1;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <USER_UART_IRQHandler+0x74>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <USER_UART_IRQHandler+0x78>)
 8000ec2:	701a      	strb	r2, [r3, #0]
if( rx_head == BUFSIZE ) {
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <USER_UART_IRQHandler+0x78>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b10      	cmp	r3, #16
 8000eca:	d102      	bne.n	8000ed2 <USER_UART_IRQHandler+0x3a>
rx_head = 0;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <USER_UART_IRQHandler+0x78>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
}
if( rx_head != RX_BUFFER_TAIL ) {
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <USER_UART_IRQHandler+0x78>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <USER_UART_IRQHandler+0x7c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d00a      	beq.n	8000ef6 <USER_UART_IRQHandler+0x5e>
 RX_BUFFER [ RX_BUFFER_HEAD ] = rx_data ;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <USER_UART_IRQHandler+0x74>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <USER_UART_IRQHandler+0x70>)
 8000ee6:	7811      	ldrb	r1, [r2, #0]
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <USER_UART_IRQHandler+0x80>)
 8000eea:	54d1      	strb	r1, [r2, r3]
RX_BUFFER_HEAD = rx_head ;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <USER_UART_IRQHandler+0x78>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <USER_UART_IRQHandler+0x74>)
 8000ef4:	601a      	str	r2, [r3, #0]
}
}
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40004400 	.word	0x40004400
 8000f08:	20001a48 	.word	0x20001a48
 8000f0c:	20001a44 	.word	0x20001a44
 8000f10:	20001994 	.word	0x20001994
 8000f14:	20001a4c 	.word	0x20001a4c
 8000f18:	20001a34 	.word	0x20001a34

08000f1c <USART2_SendChar>:

void USART2_SendChar (uint8_t c) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit (&huart2 , &c, sizeof (c), 10);
 8000f26:	1df9      	adds	r1, r7, #7
 8000f28:	230a      	movs	r3, #10
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <USART2_SendChar+0x20>)
 8000f2e:	f002 fc7a 	bl	8003826 <HAL_UART_Transmit>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001a50 	.word	0x20001a50

08000f40 <USART2_Dequeue>:

int USART2_Dequeue ( char * c) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
int ret ;
ret = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
*c = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]

HAL_NVIC_DisableIRQ ( USART2_IRQn );
 8000f52:	2026      	movs	r0, #38	; 0x26
 8000f54:	f000 f9ed 	bl	8001332 <HAL_NVIC_DisableIRQ>

 if ( RX_BUFFER_HEAD != RX_BUFFER_TAIL ) {
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <USART2_Dequeue+0x5c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d013      	beq.n	8000f8c <USART2_Dequeue+0x4c>
*c = RX_BUFFER [ RX_BUFFER_TAIL ];
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <USART2_Dequeue+0x64>)
 8000f6a:	5cd2      	ldrb	r2, [r2, r3]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	701a      	strb	r2, [r3, #0]
RX_BUFFER_TAIL ++;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f78:	6013      	str	r3, [r2, #0]

if ( RX_BUFFER_TAIL == BUFSIZE ) {
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d102      	bne.n	8000f88 <USART2_Dequeue+0x48>
RX_BUFFER_TAIL = 0;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <USART2_Dequeue+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
}

ret = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
}

HAL_NVIC_EnableIRQ ( USART2_IRQn );
 8000f8c:	2026      	movs	r0, #38	; 0x26
 8000f8e:	f000 f9c2 	bl	8001316 <HAL_NVIC_EnableIRQ>
return ret;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20001a44 	.word	0x20001a44
 8000fa0:	20001a4c 	.word	0x20001a4c
 8000fa4:	20001a34 	.word	0x20001a34

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff fecb 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 fb41 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fdd1 	bl	8000b80 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20001978 	.word	0x20001978
  ldr r2, =_sidata
 8000fec:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 8000ff0:	20001978 	.word	0x20001978
  ldr r4, =_ebss
 8000ff4:	20001a98 	.word	0x20001a98

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f94f 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	200f      	movs	r0, #15
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fe3e 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f975 	bl	800134e <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f92f 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000196c 	.word	0x2000196c
 8001098:	20001974 	.word	0x20001974
 800109c:	20001970 	.word	0x20001970

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20001974 	.word	0x20001974
 80010c4:	20001a94 	.word	0x20001a94

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20001a94 	.word	0x20001a94

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db12      	blt.n	80011b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	490a      	ldr	r1, [pc, #40]	; (80011c4 <__NVIC_DisableIRQ+0x44>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	3320      	adds	r3, #32
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011ac:	f3bf 8f4f 	dsb	sy
}
 80011b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b2:	f3bf 8f6f 	isb	sy
}
 80011b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff05 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff1a 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff0d 	bl	8001144 <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff1d 	bl	8001180 <__NVIC_DisableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff94 	bl	8001284 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fea8 	bl	80010c8 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d008      	beq.n	8001398 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e052      	b.n	800143e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0216 	bic.w	r2, r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <HAL_DMA_Abort+0x62>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0208 	bic.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e013      	b.n	8001412 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fe6d 	bl	80010c8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d90c      	bls.n	8001412 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e015      	b.n	800143e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	223f      	movs	r2, #63	; 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00c      	b.n	800147e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e16b      	b.n	8001780 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 815a 	bne.w	800177a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80b4 	beq.w	800177a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <HAL_GPIO_Init+0x30c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <HAL_GPIO_Init+0x30c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_GPIO_Init+0x30c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_GPIO_Init+0x310>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_GPIO_Init+0x314>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <HAL_GPIO_Init+0x318>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d025      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a50      	ldr	r2, [pc, #320]	; (80017a8 <HAL_GPIO_Init+0x31c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01f      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4f      	ldr	r2, [pc, #316]	; (80017ac <HAL_GPIO_Init+0x320>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x21a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4e      	ldr	r2, [pc, #312]	; (80017b0 <HAL_GPIO_Init+0x324>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x216>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x328>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x212>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <HAL_GPIO_Init+0x32c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_GPIO_Init+0x330>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x20a>
 8001692:	2307      	movs	r3, #7
 8001694:	e00e      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 8001696:	2308      	movs	r3, #8
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 800169a:	2306      	movs	r3, #6
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x310>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ae90 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021c00 	.word	0x40021c00
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e12b      	b.n	8001a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ffe4 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800185a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800185c:	f001 fe2e 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8001860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a81      	ldr	r2, [pc, #516]	; (8001a6c <HAL_I2C_Init+0x274>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d807      	bhi.n	800187c <HAL_I2C_Init+0x84>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a80      	ldr	r2, [pc, #512]	; (8001a70 <HAL_I2C_Init+0x278>)
 8001870:	4293      	cmp	r3, r2
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e006      	b.n	800188a <HAL_I2C_Init+0x92>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a7d      	ldr	r2, [pc, #500]	; (8001a74 <HAL_I2C_Init+0x27c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0e7      	b.n	8001a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a78      	ldr	r2, [pc, #480]	; (8001a78 <HAL_I2C_Init+0x280>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	; (8001a6c <HAL_I2C_Init+0x274>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d802      	bhi.n	80018cc <HAL_I2C_Init+0xd4>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	e009      	b.n	80018e0 <HAL_I2C_Init+0xe8>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_I2C_Init+0x284>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	3301      	adds	r3, #1
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	495c      	ldr	r1, [pc, #368]	; (8001a6c <HAL_I2C_Init+0x274>)
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d819      	bhi.n	8001934 <HAL_I2C_Init+0x13c>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e59      	subs	r1, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fbb1 f3f3 	udiv	r3, r1, r3
 800190e:	1c59      	adds	r1, r3, #1
 8001910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001914:	400b      	ands	r3, r1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_I2C_Init+0x138>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e59      	subs	r1, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fbb1 f3f3 	udiv	r3, r1, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192e:	e051      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 8001930:	2304      	movs	r3, #4
 8001932:	e04f      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d111      	bne.n	8001960 <HAL_I2C_Init+0x168>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	440b      	add	r3, r1
 800194a:	fbb0 f3f3 	udiv	r3, r0, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	e012      	b.n	8001986 <HAL_I2C_Init+0x18e>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	0099      	lsls	r1, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	fbb0 f3f3 	udiv	r3, r0, r3
 8001976:	3301      	adds	r3, #1
 8001978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Init+0x196>
 800198a:	2301      	movs	r3, #1
 800198c:	e022      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10e      	bne.n	80019b4 <HAL_I2C_Init+0x1bc>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e58      	subs	r0, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	440b      	add	r3, r1
 80019a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b2:	e00f      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6911      	ldr	r1, [r2, #16]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68d2      	ldr	r2, [r2, #12]
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	000186a0 	.word	0x000186a0
 8001a70:	001e847f 	.word	0x001e847f
 8001a74:	003d08ff 	.word	0x003d08ff
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	4613      	mov	r3, r2
 8001a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fb18 	bl	80010c8 <HAL_GetTick>
 8001a98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	f040 80e0 	bne.w	8001c68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2319      	movs	r3, #25
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4970      	ldr	r1, [pc, #448]	; (8001c74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f964 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0d3      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Master_Transmit+0x50>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0cc      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d007      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2221      	movs	r2, #33	; 0x21
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2210      	movs	r2, #16
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a50      	ldr	r2, [pc, #320]	; (8001c78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b38:	8979      	ldrh	r1, [r7, #10]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f89c 	bl	8001c7c <I2C_MasterRequestWrite>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e08d      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b64:	e066      	b.n	8001c34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f9de 	bl	8001f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x188>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	6a39      	ldr	r1, [r7, #32]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f9ce 	bl	8001fae <I2C_WaitOnBTFFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d107      	bne.n	8001c30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e01a      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d194      	bne.n	8001b66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	00100002 	.word	0x00100002
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d006      	beq.n	8001ca6 <I2C_MasterRequestWrite+0x2a>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d003      	beq.n	8001ca6 <I2C_MasterRequestWrite+0x2a>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e00b      	b.n	8001cd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d107      	bne.n	8001cd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f84f 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf6:	d103      	bne.n	8001d00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e035      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d0c:	d108      	bne.n	8001d20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	e01b      	b.n	8001d58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	11db      	asrs	r3, r3, #7
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 0306 	and.w	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f063 030f 	orn	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <I2C_MasterRequestWrite+0xfc>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f875 	bl	8001e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e010      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <I2C_MasterRequestWrite+0x100>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f865 	bl	8001e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00010008 	.word	0x00010008
 8001d7c:	00010002 	.word	0x00010002

08001d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	e025      	b.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d021      	beq.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff f995 	bl	80010c8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d116      	bne.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e023      	b.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10d      	bne.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	e00c      	b.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d0b6      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e3c:	e051      	b.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4c:	d123      	bne.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0204 	orr.w	r2, r3, #4
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e046      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d021      	beq.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff f913 	bl	80010c8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d116      	bne.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f043 0220 	orr.w	r2, r3, #32
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e020      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10c      	bne.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	e00b      	b.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	4013      	ands	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d18d      	bne.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f38:	e02d      	b.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f878 	bl	8002030 <I2C_IsAcknowledgeFailed>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e02d      	b.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d021      	beq.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f8b9 	bl	80010c8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d116      	bne.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e007      	b.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d1ca      	bne.n	8001f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fba:	e02d      	b.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f837 	bl	8002030 <I2C_IsAcknowledgeFailed>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e02d      	b.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d021      	beq.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd4:	f7ff f878 	bl	80010c8 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d302      	bcc.n	8001fea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d1ca      	bne.n	8001fbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d11b      	bne.n	8002080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e128      	b.n	80022f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a90      	ldr	r2, [pc, #576]	; (80022fc <HAL_I2S_Init+0x26c>)
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7fe fc0b 	bl	80008d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020d8:	f023 030f 	bic.w	r3, r3, #15
 80020dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2202      	movs	r2, #2
 80020e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d060      	beq.n	80021b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80020f6:	2310      	movs	r3, #16
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e001      	b.n	8002100 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80020fc:	2320      	movs	r3, #32
 80020fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b20      	cmp	r3, #32
 8002106:	d802      	bhi.n	800210e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800210e:	2001      	movs	r0, #1
 8002110:	f001 fade 	bl	80036d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002114:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211e:	d125      	bne.n	800216c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	3305      	adds	r3, #5
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e01f      	b.n	800218a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	fbb2 f2f3 	udiv	r2, r2, r3
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	3305      	adds	r3, #5
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e00e      	b.n	800218a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fbb2 f2f3 	udiv	r2, r2, r3
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	3305      	adds	r3, #5
 8002188:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4a5c      	ldr	r2, [pc, #368]	; (8002300 <HAL_I2S_Init+0x270>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	08db      	lsrs	r3, r3, #3
 8002194:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e003      	b.n	80021b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d902      	bls.n	80021c4 <HAL_I2S_Init+0x134>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2bff      	cmp	r3, #255	; 0xff
 80021c2:	d907      	bls.n	80021d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	f043 0210 	orr.w	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e08f      	b.n	80022f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	ea42 0103 	orr.w	r1, r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80021f2:	f023 030f 	bic.w	r3, r3, #15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6851      	ldr	r1, [r2, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68d2      	ldr	r2, [r2, #12]
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6992      	ldr	r2, [r2, #24]
 800220a:	430a      	orrs	r2, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002216:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d161      	bne.n	80022e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a38      	ldr	r2, [pc, #224]	; (8002304 <HAL_I2S_Init+0x274>)
 8002224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a37      	ldr	r2, [pc, #220]	; (8002308 <HAL_I2S_Init+0x278>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_I2S_Init+0x1a4>
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_I2S_Init+0x27c>)
 8002232:	e001      	b.n	8002238 <HAL_I2S_Init+0x1a8>
 8002234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	4932      	ldr	r1, [pc, #200]	; (8002308 <HAL_I2S_Init+0x278>)
 8002240:	428a      	cmp	r2, r1
 8002242:	d101      	bne.n	8002248 <HAL_I2S_Init+0x1b8>
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_I2S_Init+0x27c>)
 8002246:	e001      	b.n	800224c <HAL_I2S_Init+0x1bc>
 8002248:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800224c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002250:	f023 030f 	bic.w	r3, r3, #15
 8002254:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_I2S_Init+0x278>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_I2S_Init+0x1d4>
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_I2S_Init+0x27c>)
 8002262:	e001      	b.n	8002268 <HAL_I2S_Init+0x1d8>
 8002264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002268:	2202      	movs	r2, #2
 800226a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <HAL_I2S_Init+0x278>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_I2S_Init+0x1ea>
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_I2S_Init+0x27c>)
 8002278:	e001      	b.n	800227e <HAL_I2S_Init+0x1ee>
 800227a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228a:	d003      	beq.n	8002294 <HAL_I2S_Init+0x204>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	e001      	b.n	80022a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022be:	4313      	orrs	r3, r2
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	897b      	ldrh	r3, [r7, #10]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_I2S_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_I2S_Init+0x24c>
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_I2S_Init+0x27c>)
 80022da:	e001      	b.n	80022e0 <HAL_I2S_Init+0x250>
 80022dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e0:	897a      	ldrh	r2, [r7, #10]
 80022e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	080025e9 	.word	0x080025e9
 8002300:	cccccccd 	.word	0xcccccccd
 8002304:	08002771 	.word	0x08002771
 8002308:	40003800 	.word	0x40003800
 800230c:	40003400 	.word	0x40003400

08002310 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_I2S_Transmit+0x1c>
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0dc      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2S_Transmit+0x30>
 800233c:	2302      	movs	r3, #2
 800233e:	e0d4      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d005      	beq.n	8002360 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	e0c4      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2203      	movs	r2, #3
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d002      	beq.n	800238c <HAL_I2S_Transmit+0x7c>
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10a      	bne.n	80023a2 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023a0:	e005      	b.n	80023ae <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d007      	beq.n	80023d6 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	2102      	movs	r1, #2
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f98d 	bl	80026fc <I2S_WaitFlagStateUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d04e      	beq.n	8002486 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e070      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	2102      	movs	r1, #2
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f962 	bl	80026fc <I2S_WaitFlagStateUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00f      	beq.n	800245e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e045      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d10c      	bne.n	8002486 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1bb      	bne.n	8002408 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a4:	d118      	bne.n	80024d8 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f925 	bl	80026fc <I2S_WaitFlagStateUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e008      	b.n	80024ea <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10e      	bne.n	8002582 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002572:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffb8 	bl	80024f2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	b292      	uxth	r2, r2
 800259e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff93 	bl	8002506 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b04      	cmp	r3, #4
 8002602:	d13a      	bne.n	800267a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d109      	bne.n	8002622 <I2S_IRQHandler+0x3a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d102      	bne.n	8002622 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ffb4 	bl	800258a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d126      	bne.n	800267a <I2S_IRQHandler+0x92>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d11f      	bne.n	800267a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002648:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0202 	orr.w	r2, r3, #2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff50 	bl	800251a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b03      	cmp	r3, #3
 8002684:	d136      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d109      	bne.n	80026a4 <I2S_IRQHandler+0xbc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d102      	bne.n	80026a4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff45 	bl	800252e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d122      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d11b      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ca:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff13 	bl	800251a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800270c:	f7fe fcdc 	bl	80010c8 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002712:	e018      	b.n	8002746 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d014      	beq.n	8002746 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800271c:	f7fe fcd4 	bl	80010c8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d902      	bls.n	8002732 <I2S_WaitFlagStateUntilTimeout+0x36>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e00f      	b.n	8002766 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4013      	ands	r3, r2
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	429a      	cmp	r2, r3
 8002762:	d1d7      	bne.n	8002714 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4aa2      	ldr	r2, [pc, #648]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800278a:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800278c:	e001      	b.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800278e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a9b      	ldr	r2, [pc, #620]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80027a8:	4b9a      	ldr	r3, [pc, #616]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027aa:	e001      	b.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80027ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027bc:	d004      	beq.n	80027c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8099 	bne.w	80028fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f925 	bl	8002a2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9c8 	bl	8002b8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d13a      	bne.n	800287c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d035      	beq.n	800287c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800281a:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800281c:	e001      	b.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800281e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4979      	ldr	r1, [pc, #484]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800282a:	428b      	cmp	r3, r1
 800282c:	d101      	bne.n	8002832 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800282e:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002830:	e001      	b.n	8002836 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800283a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800284a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fe4f 	bl	800251a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	f040 80be 	bne.w	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80b8 	beq.w	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80028ae:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028b0:	e001      	b.n	80028b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80028b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4954      	ldr	r1, [pc, #336]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028be:	428b      	cmp	r3, r1
 80028c0:	d101      	bne.n	80028c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028c4:	e001      	b.n	80028ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80028c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fe11 	bl	800251a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028f8:	e084      	b.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d107      	bne.n	8002914 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8be 	bl	8002a90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8fd 	bl	8002b28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d12f      	bne.n	8002998 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02a      	beq.n	8002998 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002950:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800295e:	e001      	b.n	8002964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4929      	ldr	r1, [pc, #164]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d101      	bne.n	8002974 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002972:	e001      	b.n	8002978 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002978:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800297c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fdc1 	bl	800251a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d131      	bne.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d02c      	beq.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029b8:	e001      	b.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4912      	ldr	r1, [pc, #72]	; (8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d101      	bne.n	80029ce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029cc:	e001      	b.n	80029d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80029ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029e6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff fd8c 	bl	800251a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a02:	e000      	b.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a04:	bf00      	nop
}
 8002a06:	bf00      	nop
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40003800 	.word	0x40003800
 8002a14:	40003400 	.word	0x40003400

08002a18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c99      	adds	r1, r3, #2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6251      	str	r1, [r2, #36]	; 0x24
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffc9 	bl	8002a18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c99      	adds	r1, r3, #2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6251      	str	r1, [r2, #36]	; 0x24
 8002aa2:	8819      	ldrh	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <I2SEx_TxISR_I2SExt+0x90>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <I2SEx_TxISR_I2SExt+0x22>
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <I2SEx_TxISR_I2SExt+0x94>)
 8002ab0:	e001      	b.n	8002ab6 <I2SEx_TxISR_I2SExt+0x26>
 8002ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ab6:	460a      	mov	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d121      	bne.n	8002b16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <I2SEx_TxISR_I2SExt+0x90>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <I2SEx_TxISR_I2SExt+0x50>
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <I2SEx_TxISR_I2SExt+0x94>)
 8002ade:	e001      	b.n	8002ae4 <I2SEx_TxISR_I2SExt+0x54>
 8002ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	490d      	ldr	r1, [pc, #52]	; (8002b20 <I2SEx_TxISR_I2SExt+0x90>)
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d101      	bne.n	8002af4 <I2SEx_TxISR_I2SExt+0x64>
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <I2SEx_TxISR_I2SExt+0x94>)
 8002af2:	e001      	b.n	8002af8 <I2SEx_TxISR_I2SExt+0x68>
 8002af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002afc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff81 	bl	8002a18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40003800 	.word	0x40003800
 8002b24:	40003400 	.word	0x40003400

08002b28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68d8      	ldr	r0, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	1c99      	adds	r1, r3, #2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b40:	b282      	uxth	r2, r0
 8002b42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d113      	bne.n	8002b84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ff4a 	bl	8002a18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <I2SEx_RxISR_I2SExt+0x90>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <I2SEx_RxISR_I2SExt+0x16>
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <I2SEx_RxISR_I2SExt+0x94>)
 8002ba0:	e001      	b.n	8002ba6 <I2SEx_RxISR_I2SExt+0x1a>
 8002ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba6:	68d8      	ldr	r0, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	1c99      	adds	r1, r3, #2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002bb2:	b282      	uxth	r2, r0
 8002bb4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d121      	bne.n	8002c12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <I2SEx_RxISR_I2SExt+0x90>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <I2SEx_RxISR_I2SExt+0x50>
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <I2SEx_RxISR_I2SExt+0x94>)
 8002bda:	e001      	b.n	8002be0 <I2SEx_RxISR_I2SExt+0x54>
 8002bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	490d      	ldr	r1, [pc, #52]	; (8002c1c <I2SEx_RxISR_I2SExt+0x90>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d101      	bne.n	8002bf0 <I2SEx_RxISR_I2SExt+0x64>
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <I2SEx_RxISR_I2SExt+0x94>)
 8002bee:	e001      	b.n	8002bf4 <I2SEx_RxISR_I2SExt+0x68>
 8002bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff03 	bl	8002a18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40003800 	.word	0x40003800
 8002c20:	40003400 	.word	0x40003400

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e264      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	4ba3      	ldr	r3, [pc, #652]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4ba0      	ldr	r3, [pc, #640]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e23f      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f9f4 	bl	80010c8 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe f9f0 	bl	80010c8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e204      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe f9e0 	bl	80010c8 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe f9dc 	bl	80010c8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1f0      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1c4      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4952      	ldr	r1, [pc, #328]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f995 	bl	80010c8 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe f991 	bl	80010c8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1a5      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f974 	bl	80010c8 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe f970 	bl	80010c8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e184      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe f954 	bl	80010c8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe f950 	bl	80010c8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e164      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
 8002e42:	e015      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f93d 	bl	80010c8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe f939 	bl	80010c8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e14d      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a0 	beq.w	8002fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe f8ff 	bl	80010c8 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e011      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470000 	.word	0x42470000
 8002ed8:	42470e80 	.word	0x42470e80
 8002edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fe f8f2 	bl	80010c8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e106      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <HAL_RCC_OscConfig+0x4e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2f0>
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a7a      	ldr	r2, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b78      	ldr	r3, [pc, #480]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a77      	ldr	r2, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f36:	4b75      	ldr	r3, [pc, #468]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a74      	ldr	r2, [pc, #464]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a71      	ldr	r2, [pc, #452]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe f8b7 	bl	80010c8 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f8b3 	bl	80010c8 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0c5      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x33a>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe f8a1 	bl	80010c8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe f89d 	bl	80010c8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0af      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 809b 	beq.w	80030fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d05c      	beq.n	800308e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d141      	bne.n	8003060 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f871 	bl	80010c8 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe f86d 	bl	80010c8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e081      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	4937      	ldr	r1, [pc, #220]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe f846 	bl	80010c8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe f842 	bl	80010c8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e056      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x41c>
 800305e:	e04e      	b.n	80030fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe f82f 	bl	80010c8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe f82b 	bl	80010c8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e03f      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x44a>
 800308c:	e037      	b.n	80030fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e032      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d028      	beq.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d11a      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ca:	4013      	ands	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d111      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40007000 	.word	0x40007000
 800310c:	40023800 	.word	0x40023800
 8003110:	42470060 	.word	0x42470060

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fd ff60 	bl	80010c8 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fd ff5c 	bl	80010c8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fec0 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	080046dc 	.word	0x080046dc
 80032d8:	2000196c 	.word	0x2000196c
 80032dc:	20001970 	.word	0x20001970

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	2300      	movs	r3, #0
 80032f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d00d      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x40>
 8003304:	2b08      	cmp	r3, #8
 8003306:	f200 80bd 	bhi.w	8003484 <HAL_RCC_GetSysClockFreq+0x1a4>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x34>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x3a>
 8003312:	e0b7      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003316:	60bb      	str	r3, [r7, #8]
       break;
 8003318:	e0b7      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800331c:	60bb      	str	r3, [r7, #8]
      break;
 800331e:	e0b4      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04d      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	ea02 0800 	and.w	r8, r2, r0
 800334e:	ea03 0901 	and.w	r9, r3, r1
 8003352:	4640      	mov	r0, r8
 8003354:	4649      	mov	r1, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003364:	0142      	lsls	r2, r0, #5
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	ebb0 0008 	subs.w	r0, r0, r8
 800336e:	eb61 0109 	sbc.w	r1, r1, r9
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	018b      	lsls	r3, r1, #6
 800337c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003380:	0182      	lsls	r2, r0, #6
 8003382:	1a12      	subs	r2, r2, r0
 8003384:	eb63 0301 	sbc.w	r3, r3, r1
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	00d9      	lsls	r1, r3, #3
 8003392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003396:	00d0      	lsls	r0, r2, #3
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	eb12 0208 	adds.w	r2, r2, r8
 80033a0:	eb43 0309 	adc.w	r3, r3, r9
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	0259      	lsls	r1, r3, #9
 80033ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033b2:	0250      	lsls	r0, r2, #9
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f7fc ff00 	bl	80001c8 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e04a      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	ea02 0400 	and.w	r4, r2, r0
 80033ea:	ea03 0501 	and.w	r5, r3, r1
 80033ee:	4620      	mov	r0, r4
 80033f0:	4629      	mov	r1, r5
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	014b      	lsls	r3, r1, #5
 80033fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003400:	0142      	lsls	r2, r0, #5
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	1b00      	subs	r0, r0, r4
 8003408:	eb61 0105 	sbc.w	r1, r1, r5
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	018b      	lsls	r3, r1, #6
 8003416:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800341a:	0182      	lsls	r2, r0, #6
 800341c:	1a12      	subs	r2, r2, r0
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	00d9      	lsls	r1, r3, #3
 800342c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003430:	00d0      	lsls	r0, r2, #3
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	1912      	adds	r2, r2, r4
 8003438:	eb45 0303 	adc.w	r3, r5, r3
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0299      	lsls	r1, r3, #10
 8003446:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800344a:	0290      	lsls	r0, r2, #10
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	461a      	mov	r2, r3
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f7fc feb4 	bl	80001c8 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	60bb      	str	r3, [r7, #8]
      break;
 8003482:	e002      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348a:	68bb      	ldr	r3, [r7, #8]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000196c 	.word	0x2000196c

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	080046ec 	.word	0x080046ec

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffdc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0b5b      	lsrs	r3, r3, #13
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	080046ec 	.word	0x080046ec

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003530:	2b00      	cmp	r3, #0
 8003532:	d035      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800353a:	f7fd fdc5 	bl	80010c8 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003542:	f7fd fdc1 	bl	80010c8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0b0      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003554:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	019a      	lsls	r2, r3, #6
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	071b      	lsls	r3, r3, #28
 800356c:	4955      	ldr	r1, [pc, #340]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003574:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800357a:	f7fd fda5 	bl	80010c8 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003582:	f7fd fda1 	bl	80010c8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e090      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8083 	beq.w	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035ca:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a3e      	ldr	r2, [pc, #248]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035d6:	f7fd fd77 	bl	80010c8 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fd fd73 	bl	80010c8 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e062      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d028      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d114      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd fd41 	bl	80010c8 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fd3d 	bl	80010c8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e02a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ee      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003678:	d10d      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800368a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368e:	490d      	ldr	r1, [pc, #52]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
 8003694:	e005      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800369c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ae:	4905      	ldr	r1, [pc, #20]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	42470068 	.word	0x42470068
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000
 80036cc:	42470e40 	.word	0x42470e40

080036d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d13e      	bne.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d12f      	bne.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003706:	617b      	str	r3, [r7, #20]
          break;
 8003708:	e02f      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003716:	d108      	bne.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e007      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003754:	0f1b      	lsrs	r3, r3, #28
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
          break;
 8003762:	e002      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
          break;
 8003768:	bf00      	nop
        }
      }
      break;
 800376a:	bf00      	nop
    }
  }
  return frequency;
 800376c:	697b      	ldr	r3, [r7, #20]
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	00bb8000 	.word	0x00bb8000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	00f42400 	.word	0x00f42400

0800378c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e03f      	b.n	800381e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fb16 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fd7b 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08a      	sub	sp, #40	; 0x28
 800382a:	af02      	add	r7, sp, #8
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d17c      	bne.n	8003940 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_UART_Transmit+0x2c>
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e075      	b.n	8003942 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x3e>
 8003860:	2302      	movs	r3, #2
 8003862:	e06e      	b.n	8003942 <HAL_UART_Transmit+0x11c>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2221      	movs	r2, #33	; 0x21
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387a:	f7fd fc25 	bl	80010c8 <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d108      	bne.n	80038a8 <HAL_UART_Transmit+0x82>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e003      	b.n	80038b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038b8:	e02a      	b.n	8003910 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 faf9 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e036      	b.n	8003942 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	3302      	adds	r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e007      	b.n	8003902 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	3301      	adds	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1cf      	bne.n	80038ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fac9 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e006      	b.n	8003942 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ba      	sub	sp, #232	; 0xe8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800398a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
 800399e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fbd3 	bl	8004156 <UART_Receive_IT>
      return;
 80039b0:	e256      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80de 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
 80039bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80d1 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
 8003a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
 8003a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 81ed 	beq.w	8003e56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb5e 	bl	8004156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x17a>
 8003abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04f      	beq.n	8003b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa66 	bl	8003f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d141      	bne.n	8003b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d9      	bne.n	8003ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	4a7d      	ldr	r2, [pc, #500]	; (8003d28 <HAL_UART_IRQHandler+0x3dc>)
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fc83 	bl	8001446 <HAL_DMA_Abort_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00e      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f99a 	bl	8003e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e00a      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f996 	bl	8003e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e006      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f992 	bl	8003e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b72:	e170      	b.n	8003e56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	bf00      	nop
    return;
 8003b76:	e16e      	b.n	8003e56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 814a 	bne.w	8003e16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8143 	beq.w	8003e16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 813c 	beq.w	8003e16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	f040 80b4 	bne.w	8003d2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8140 	beq.w	8003e5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f080 8139 	bcs.w	8003e5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfa:	f000 8088 	beq.w	8003d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1d9      	bne.n	8003bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e1      	bne.n	8003c4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003caa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e3      	bne.n	8003c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cf0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e3      	bne.n	8003ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fb2c 	bl	8001366 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8c0 	bl	8003ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d24:	e099      	b.n	8003e5a <HAL_UART_IRQHandler+0x50e>
 8003d26:	bf00      	nop
 8003d28:	0800405f 	.word	0x0800405f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 808b 	beq.w	8003e5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8086 	beq.w	8003e5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d76:	647a      	str	r2, [r7, #68]	; 0x44
 8003d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e3      	bne.n	8003d52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dae:	633a      	str	r2, [r7, #48]	; 0x30
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df4:	61fa      	str	r2, [r7, #28]
 8003df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	617b      	str	r3, [r7, #20]
   return(result);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f848 	bl	8003ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e14:	e023      	b.n	8003e5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_UART_IRQHandler+0x4ea>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f929 	bl	8004086 <UART_Transmit_IT>
    return;
 8003e34:	e014      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <HAL_UART_IRQHandler+0x514>
 8003e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f969 	bl	8004126 <UART_EndTransmit_IT>
    return;
 8003e54:	e004      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
    return;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
      return;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
      return;
 8003e5e:	bf00      	nop
  }
}
 8003e60:	37e8      	adds	r7, #232	; 0xe8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop

08003e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ecc:	e050      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d04c      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <UART_WaitOnFlagUntilTimeout+0x30>
 8003edc:	f7fd f8f4 	bl	80010c8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d241      	bcs.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f40:	623a      	str	r2, [r7, #32]
 8003f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e00f      	b.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d09f      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3740      	adds	r7, #64	; 0x40
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b095      	sub	sp, #84	; 0x54
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004030:	61ba      	str	r2, [r7, #24]
 8004032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004052:	bf00      	nop
 8004054:	3754      	adds	r7, #84	; 0x54
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff ff09 	bl	8003e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b21      	cmp	r3, #33	; 0x21
 8004098:	d13e      	bne.n	8004118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d114      	bne.n	80040ce <UART_Transmit_IT+0x48>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d110      	bne.n	80040ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]
 80040cc:	e008      	b.n	80040e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6211      	str	r1, [r2, #32]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fe8e 	bl	8003e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08c      	sub	sp, #48	; 0x30
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b22      	cmp	r3, #34	; 0x22
 8004168:	f040 80ab 	bne.w	80042c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d117      	bne.n	80041a6 <UART_Receive_IT+0x50>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d113      	bne.n	80041a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	b29a      	uxth	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
 80041a4:	e026      	b.n	80041f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d007      	beq.n	80041ca <UART_Receive_IT+0x74>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <UART_Receive_IT+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e008      	b.n	80041ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004204:	2b00      	cmp	r3, #0
 8004206:	d15a      	bne.n	80042be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0220 	bic.w	r2, r2, #32
 8004216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d135      	bne.n	80042b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	623a      	str	r2, [r7, #32]
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	61bb      	str	r3, [r7, #24]
   return(result);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d10a      	bne.n	80042a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fdf9 	bl	8003ea4 <HAL_UARTEx_RxEventCallback>
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fde1 	bl	8003e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e002      	b.n	80042c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	; 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	b09f      	sub	sp, #124	; 0x7c
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	68d9      	ldr	r1, [r3, #12]
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	ea40 0301 	orr.w	r3, r0, r1
 80042ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004310:	f021 010c 	bic.w	r1, r1, #12
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	6999      	ldr	r1, [r3, #24]
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	ea40 0301 	orr.w	r3, r0, r1
 8004334:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4bc5      	ldr	r3, [pc, #788]	; (8004650 <UART_SetConfig+0x384>)
 800433c:	429a      	cmp	r2, r3
 800433e:	d004      	beq.n	800434a <UART_SetConfig+0x7e>
 8004340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4bc3      	ldr	r3, [pc, #780]	; (8004654 <UART_SetConfig+0x388>)
 8004346:	429a      	cmp	r2, r3
 8004348:	d103      	bne.n	8004352 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800434a:	f7ff f8cb 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800434e:	6778      	str	r0, [r7, #116]	; 0x74
 8004350:	e002      	b.n	8004358 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004352:	f7ff f8b3 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004356:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	f040 80b6 	bne.w	80044d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004366:	461c      	mov	r4, r3
 8004368:	f04f 0500 	mov.w	r5, #0
 800436c:	4622      	mov	r2, r4
 800436e:	462b      	mov	r3, r5
 8004370:	1891      	adds	r1, r2, r2
 8004372:	6439      	str	r1, [r7, #64]	; 0x40
 8004374:	415b      	adcs	r3, r3
 8004376:	647b      	str	r3, [r7, #68]	; 0x44
 8004378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800437c:	1912      	adds	r2, r2, r4
 800437e:	eb45 0303 	adc.w	r3, r5, r3
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	00d9      	lsls	r1, r3, #3
 800438c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004390:	00d0      	lsls	r0, r2, #3
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	1911      	adds	r1, r2, r4
 8004398:	6639      	str	r1, [r7, #96]	; 0x60
 800439a:	416b      	adcs	r3, r5
 800439c:	667b      	str	r3, [r7, #100]	; 0x64
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ac:	415b      	adcs	r3, r3
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043b8:	f7fb ff06 	bl	80001c8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4ba5      	ldr	r3, [pc, #660]	; (8004658 <UART_SetConfig+0x38c>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011e      	lsls	r6, r3, #4
 80043ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043cc:	461c      	mov	r4, r3
 80043ce:	f04f 0500 	mov.w	r5, #0
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	6339      	str	r1, [r7, #48]	; 0x30
 80043da:	415b      	adcs	r3, r3
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043e2:	1912      	adds	r2, r2, r4
 80043e4:	eb45 0303 	adc.w	r3, r5, r3
 80043e8:	f04f 0000 	mov.w	r0, #0
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	00d9      	lsls	r1, r3, #3
 80043f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f6:	00d0      	lsls	r0, r2, #3
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	1911      	adds	r1, r2, r4
 80043fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004400:	416b      	adcs	r3, r5
 8004402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	1891      	adds	r1, r2, r2
 8004410:	62b9      	str	r1, [r7, #40]	; 0x28
 8004412:	415b      	adcs	r3, r3
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800441e:	f7fb fed3 	bl	80001c8 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <UART_SetConfig+0x38c>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a87      	ldr	r2, [pc, #540]	; (8004658 <UART_SetConfig+0x38c>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	441e      	add	r6, r3
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	4618      	mov	r0, r3
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	1894      	adds	r4, r2, r2
 8004458:	623c      	str	r4, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	1812      	adds	r2, r2, r0
 8004464:	eb41 0303 	adc.w	r3, r1, r3
 8004468:	f04f 0400 	mov.w	r4, #0
 800446c:	f04f 0500 	mov.w	r5, #0
 8004470:	00dd      	lsls	r5, r3, #3
 8004472:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004476:	00d4      	lsls	r4, r2, #3
 8004478:	4622      	mov	r2, r4
 800447a:	462b      	mov	r3, r5
 800447c:	1814      	adds	r4, r2, r0
 800447e:	653c      	str	r4, [r7, #80]	; 0x50
 8004480:	414b      	adcs	r3, r1
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	461a      	mov	r2, r3
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	1891      	adds	r1, r2, r2
 8004490:	61b9      	str	r1, [r7, #24]
 8004492:	415b      	adcs	r3, r3
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800449e:	f7fb fe93 	bl	80001c8 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <UART_SetConfig+0x38c>)
 80044a8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	2164      	movs	r1, #100	; 0x64
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	3332      	adds	r3, #50	; 0x32
 80044ba:	4a67      	ldr	r2, [pc, #412]	; (8004658 <UART_SetConfig+0x38c>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0207 	and.w	r2, r3, #7
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4432      	add	r2, r6
 80044cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ce:	e0b9      	b.n	8004644 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	461c      	mov	r4, r3
 80044d4:	f04f 0500 	mov.w	r5, #0
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	6139      	str	r1, [r7, #16]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044e8:	1912      	adds	r2, r2, r4
 80044ea:	eb45 0303 	adc.w	r3, r5, r3
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044fc:	00d0      	lsls	r0, r2, #3
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	eb12 0804 	adds.w	r8, r2, r4
 8004506:	eb43 0905 	adc.w	r9, r3, r5
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	008b      	lsls	r3, r1, #2
 800451e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004522:	0082      	lsls	r2, r0, #2
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fb fe4e 	bl	80001c8 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b49      	ldr	r3, [pc, #292]	; (8004658 <UART_SetConfig+0x38c>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011e      	lsls	r6, r3, #4
 800453a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453c:	4618      	mov	r0, r3
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	1894      	adds	r4, r2, r2
 8004548:	60bc      	str	r4, [r7, #8]
 800454a:	415b      	adcs	r3, r3
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004552:	1812      	adds	r2, r2, r0
 8004554:	eb41 0303 	adc.w	r3, r1, r3
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	f04f 0500 	mov.w	r5, #0
 8004560:	00dd      	lsls	r5, r3, #3
 8004562:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004566:	00d4      	lsls	r4, r2, #3
 8004568:	4622      	mov	r2, r4
 800456a:	462b      	mov	r3, r5
 800456c:	1814      	adds	r4, r2, r0
 800456e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004570:	414b      	adcs	r3, r1
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	008b      	lsls	r3, r1, #2
 8004588:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800458c:	0082      	lsls	r2, r0, #2
 800458e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004592:	f7fb fe19 	bl	80001c8 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <UART_SetConfig+0x38c>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	; 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <UART_SetConfig+0x38c>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	441e      	add	r6, r3
 80045bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045be:	4618      	mov	r0, r3
 80045c0:	f04f 0100 	mov.w	r1, #0
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	1894      	adds	r4, r2, r2
 80045ca:	603c      	str	r4, [r7, #0]
 80045cc:	415b      	adcs	r3, r3
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d4:	1812      	adds	r2, r2, r0
 80045d6:	eb41 0303 	adc.w	r3, r1, r3
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	f04f 0500 	mov.w	r5, #0
 80045e2:	00dd      	lsls	r5, r3, #3
 80045e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045e8:	00d4      	lsls	r4, r2, #3
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	eb12 0a00 	adds.w	sl, r2, r0
 80045f2:	eb43 0b01 	adc.w	fp, r3, r1
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	008b      	lsls	r3, r1, #2
 800460a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800460e:	0082      	lsls	r2, r0, #2
 8004610:	4650      	mov	r0, sl
 8004612:	4659      	mov	r1, fp
 8004614:	f7fb fdd8 	bl	80001c8 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <UART_SetConfig+0x38c>)
 800461e:	fba3 1302 	umull	r1, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3332      	adds	r3, #50	; 0x32
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <UART_SetConfig+0x38c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4432      	add	r2, r6
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	377c      	adds	r7, #124	; 0x7c
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4d0d      	ldr	r5, [pc, #52]	; (8004694 <__libc_init_array+0x38>)
 8004660:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <__libc_init_array+0x3c>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	2600      	movs	r6, #0
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	4d0b      	ldr	r5, [pc, #44]	; (800469c <__libc_init_array+0x40>)
 800466e:	4c0c      	ldr	r4, [pc, #48]	; (80046a0 <__libc_init_array+0x44>)
 8004670:	f000 f820 	bl	80046b4 <_init>
 8004674:	1b64      	subs	r4, r4, r5
 8004676:	10a4      	asrs	r4, r4, #2
 8004678:	2600      	movs	r6, #0
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	080046fc 	.word	0x080046fc
 8004698:	080046fc 	.word	0x080046fc
 800469c:	080046fc 	.word	0x080046fc
 80046a0:	08004700 	.word	0x08004700

080046a4 <memset>:
 80046a4:	4402      	add	r2, r0
 80046a6:	4603      	mov	r3, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	f803 1b01 	strb.w	r1, [r3], #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
