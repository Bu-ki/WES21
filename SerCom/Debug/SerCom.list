
SerCom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002950  08002950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002958  08002958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000084  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000092a0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e6  00000000  00000000  000292dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f787  00000000  00000000  0002b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091aa  00000000  00000000  0004af87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be8d6  00000000  00000000  00054131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00112a07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aa8  00000000  00000000  00112a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800291c 	.word	0x0800291c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800291c 	.word	0x0800291c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_GPIO_Init+0x30>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <MX_GPIO_Init+0x30>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_GPIO_Init+0x30>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40023800 	.word	0x40023800

080004f4 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main ( void ) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
	char c;

	HAL_Init();
 80004fa:	f000 fa4f 	bl	800099c <HAL_Init>
	SystemClock_Config();
 80004fe:	f000 f837 	bl	8000570 <SystemClock_Config>
	MX_GPIO_Init();
 8000502:	f7ff ffdd 	bl	80004c0 <MX_GPIO_Init>

	MX_USART2_UART_Init ();
 8000506:	f000 f913 	bl	8000730 <MX_USART2_UART_Init>

	while (1) {

		USART2_Dequeue (&c);
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f9e7 	bl	80008e0 <USART2_Dequeue>
		if ( c == 'x'){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b78      	cmp	r3, #120	; 0x78
 8000516:	d11d      	bne.n	8000554 <main+0x60>
			int size = 3;
 8000518:	2303      	movs	r3, #3
 800051a:	60bb      	str	r3, [r7, #8]
			char poruka[3] = {'B','O' ,'K'};
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <main+0x78>)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	4611      	mov	r1, r2
 8000524:	8019      	strh	r1, [r3, #0]
 8000526:	3302      	adds	r3, #2
 8000528:	0c12      	lsrs	r2, r2, #16
 800052a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++ ){
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e009      	b.n	8000546 <main+0x52>

				USART2_SendChar (poruka[i]);
 8000532:	1d3a      	adds	r2, r7, #4
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f9be 	bl	80008bc <USART2_SendChar>
			for (int i = 0; i < size; i++ ){
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	429a      	cmp	r2, r3
 800054c:	dbf1      	blt.n	8000532 <main+0x3e>
			}
			break;
 800054e:	bf00      	nop
 8000550:	2300      	movs	r3, #0
 8000552:	e007      	b.n	8000564 <main+0x70>

		}

		if ( c != 0) {
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0d7      	beq.n	800050a <main+0x16>
			USART2_SendChar (c);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f9ad 	bl	80008bc <USART2_SendChar>
		USART2_Dequeue (&c);
 8000562:	e7d2      	b.n	800050a <main+0x16>
		}
	}
}
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08002934 	.word	0x08002934

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f9c4 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e4:	23a8      	movs	r3, #168	; 0xa8
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fdb5 	bl	8001164 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 f820 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2105      	movs	r1, #5
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f816 	bl	8001654 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062e:	f000 f809 	bl	8000644 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <HAL_MspInit+0x4c>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <HAL_MspInit+0x4c>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x4c>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f9a8 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <USART2_IRQHandler+0x14>)
 80006fa:	f001 fa5b 	bl	8001bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler (&huart2);
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <USART2_IRQHandler+0x14>)
 8000700:	f000 f89a 	bl	8000838 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000048 	.word	0x20000048

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 f944 	bl	80019f4 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f7ff ff67 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000048 	.word	0x20000048
 8000780:	40004400 	.word	0x40004400

08000784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <HAL_UART_MspInit+0xa4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d13b      	bne.n	800081e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_UART_MspInit+0xa8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ee:	2307      	movs	r3, #7
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <HAL_UART_MspInit+0xac>)
 80007fa:	f000 fb17 	bl	8000e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2026      	movs	r0, #38	; 0x26
 8000804:	f000 fa3b 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000808:	2026      	movs	r0, #38	; 0x26
 800080a:	f000 fa54 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
    __HAL_UART_ENABLE_IT (&huart2 , UART_IT_RXNE );
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_UART_MspInit+0xb0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <HAL_UART_MspInit+0xb0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f042 0220 	orr.w	r2, r2, #32
 800081c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40004400 	.word	0x40004400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	20000048 	.word	0x20000048

08000838 <USER_UART_IRQHandler>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler ( UART_HandleTypeDef *huart ) {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
if( huart -> Instance == USART2 ) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <USER_UART_IRQHandler+0x6c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d125      	bne.n	8000896 <USER_UART_IRQHandler+0x5e>

rx_data = __HAL_UART_FLUSH_DRREGISTER ( huart );
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <USER_UART_IRQHandler+0x70>)
 8000854:	701a      	strb	r2, [r3, #0]

static char rx_head ;
rx_head = RX_BUFFER_HEAD + 1;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <USER_UART_IRQHandler+0x74>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <USER_UART_IRQHandler+0x78>)
 8000862:	701a      	strb	r2, [r3, #0]
if( rx_head == BUFSIZE ) {
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <USER_UART_IRQHandler+0x78>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b10      	cmp	r3, #16
 800086a:	d102      	bne.n	8000872 <USER_UART_IRQHandler+0x3a>
rx_head = 0;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <USER_UART_IRQHandler+0x78>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
}
if( rx_head != RX_BUFFER_TAIL ) {
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <USER_UART_IRQHandler+0x78>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <USER_UART_IRQHandler+0x7c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d00a      	beq.n	8000896 <USER_UART_IRQHandler+0x5e>
 RX_BUFFER [ RX_BUFFER_HEAD ] = rx_data ;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <USER_UART_IRQHandler+0x74>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <USER_UART_IRQHandler+0x70>)
 8000886:	7811      	ldrb	r1, [r2, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <USER_UART_IRQHandler+0x80>)
 800088a:	54d1      	strb	r1, [r2, r3]
RX_BUFFER_HEAD = rx_head ;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <USER_UART_IRQHandler+0x78>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <USER_UART_IRQHandler+0x74>)
 8000894:	601a      	str	r2, [r3, #0]
}
}
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	20000040 	.word	0x20000040
 80008ac:	2000003c 	.word	0x2000003c
 80008b0:	20000028 	.word	0x20000028
 80008b4:	20000044 	.word	0x20000044
 80008b8:	2000002c 	.word	0x2000002c

080008bc <USART2_SendChar>:

void USART2_SendChar (uint8_t c) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit (&huart2 , &c, sizeof (c), 10);
 80008c6:	1df9      	adds	r1, r7, #7
 80008c8:	230a      	movs	r3, #10
 80008ca:	2201      	movs	r2, #1
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <USART2_SendChar+0x20>)
 80008ce:	f001 f8de 	bl	8001a8e <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000048 	.word	0x20000048

080008e0 <USART2_Dequeue>:

int USART2_Dequeue ( char * c) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
int ret ;
ret = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
*c = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

HAL_NVIC_DisableIRQ ( USART2_IRQn );
 80008f2:	2026      	movs	r0, #38	; 0x26
 80008f4:	f000 f9ed 	bl	8000cd2 <HAL_NVIC_DisableIRQ>

 if ( RX_BUFFER_HEAD != RX_BUFFER_TAIL ) {
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <USART2_Dequeue+0x5c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <USART2_Dequeue+0x60>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d013      	beq.n	800092c <USART2_Dequeue+0x4c>
*c = RX_BUFFER [ RX_BUFFER_TAIL ];
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <USART2_Dequeue+0x60>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <USART2_Dequeue+0x64>)
 800090a:	5cd2      	ldrb	r2, [r2, r3]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
RX_BUFFER_TAIL ++;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <USART2_Dequeue+0x60>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <USART2_Dequeue+0x60>)
 8000918:	6013      	str	r3, [r2, #0]

if ( RX_BUFFER_TAIL == BUFSIZE ) {
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <USART2_Dequeue+0x60>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b10      	cmp	r3, #16
 8000920:	d102      	bne.n	8000928 <USART2_Dequeue+0x48>
RX_BUFFER_TAIL = 0;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <USART2_Dequeue+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
}

ret = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
}

HAL_NVIC_EnableIRQ ( USART2_IRQn );
 800092c:	2026      	movs	r0, #38	; 0x26
 800092e:	f000 f9c2 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
return ret;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000003c 	.word	0x2000003c
 8000940:	20000044 	.word	0x20000044
 8000944:	2000002c 	.word	0x2000002c

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000972:	f7ff fecb 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 ffa5 	bl	80028c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fdbb 	bl	80004f4 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800098c:	08002960 	.word	0x08002960
  ldr r2, =_sbss
 8000990:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000994:	20000090 	.word	0x20000090

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <HAL_Init+0x40>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_Init+0x40>)
 80009b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x40>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f94f 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fe3e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023c00 	.word	0x40023c00

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f975 	bl	8000cee <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 f92f 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	2000008c 	.word	0x2000008c

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db12      	blt.n	8000b58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	490a      	ldr	r1, [pc, #40]	; (8000b64 <__NVIC_DisableIRQ+0x44>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	3320      	adds	r3, #32
 8000b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4c:	f3bf 8f4f 	dsb	sy
}
 8000b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b52:	f3bf 8f6f 	isb	sy
}
 8000b56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff05 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff1a 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff0d 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff1d 	bl	8000b20 <__NVIC_DisableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff94 	bl	8000c24 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fea8 	bl	8000a68 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d008      	beq.n	8000d38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e052      	b.n	8000dde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0216 	bic.w	r2, r2, #22
 8000d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <HAL_DMA_Abort+0x62>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0208 	bic.w	r2, r2, #8
 8000d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d88:	e013      	b.n	8000db2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d8a:	f7ff fe6d 	bl	8000a68 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d90c      	bls.n	8000db2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e015      	b.n	8000dde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1e4      	bne.n	8000d8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc4:	223f      	movs	r2, #63	; 0x3f
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d004      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00c      	b.n	8000e1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2205      	movs	r2, #5
 8000e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0201 	bic.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e16b      	b.n	8001120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 815a 	bne.w	800111a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80b4 	beq.w	800111a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b60      	ldr	r3, [pc, #384]	; (8001138 <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <HAL_GPIO_Init+0x30c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <HAL_GPIO_Init+0x30c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a5b      	ldr	r2, [pc, #364]	; (800113c <HAL_GPIO_Init+0x310>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x314>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d02b      	beq.n	8001052 <HAL_GPIO_Init+0x226>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x318>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x222>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x31c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x21e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x320>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <HAL_GPIO_Init+0x324>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x328>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x32c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x330>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x20a>
 8001032:	2307      	movs	r3, #7
 8001034:	e00e      	b.n	8001054 <HAL_GPIO_Init+0x228>
 8001036:	2308      	movs	r3, #8
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x228>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x228>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x228>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x228>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x228>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x228>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x228>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	; (800113c <HAL_GPIO_Init+0x310>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_GPIO_Init+0x334>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001096:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_GPIO_Init+0x334>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_GPIO_Init+0x334>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <HAL_GPIO_Init+0x334>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x334>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_GPIO_Init+0x334>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_GPIO_Init+0x334>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_GPIO_Init+0x334>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae90 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e264      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d075      	beq.n	800126e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	4ba3      	ldr	r3, [pc, #652]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b04      	cmp	r3, #4
 800118c:	d00c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	2b08      	cmp	r3, #8
 8001198:	d112      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b9d      	ldr	r3, [pc, #628]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a6:	d10b      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	4b99      	ldr	r3, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05b      	beq.n	800126c <HAL_RCC_OscConfig+0x108>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d157      	bne.n	800126c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e23f      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d106      	bne.n	80011d8 <HAL_RCC_OscConfig+0x74>
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a90      	ldr	r2, [pc, #576]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e01d      	b.n	8001214 <HAL_RCC_OscConfig+0xb0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a8a      	ldr	r2, [pc, #552]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a87      	ldr	r2, [pc, #540]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0xb0>
 80011fc:	4b84      	ldr	r3, [pc, #528]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a83      	ldr	r2, [pc, #524]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a80      	ldr	r2, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc24 	bl	8000a68 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fc20 	bl	8000a68 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e204      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0xc0>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fc10 	bl	8000a68 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fc0c 	bl	8000a68 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1f0      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0xe8>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d063      	beq.n	8001342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b62      	ldr	r3, [pc, #392]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d11c      	bne.n	80012cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d116      	bne.n	80012cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x152>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e1c4      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4952      	ldr	r1, [pc, #328]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	e03a      	b.n	8001342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d020      	beq.n	8001316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_RCC_OscConfig+0x2b0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff fbc5 	bl	8000a68 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fbc1 	bl	8000a68 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1a5      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4940      	ldr	r1, [pc, #256]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x2b0>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fba4 	bl	8000a68 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fba0 	bl	8000a68 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e184      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d030      	beq.n	80013b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d016      	beq.n	8001384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_RCC_OscConfig+0x2b4>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fb84 	bl	8000a68 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fb80 	bl	8000a68 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e164      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x200>
 8001382:	e015      	b.n	80013b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_OscConfig+0x2b4>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb6d 	bl	8000a68 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff fb69 	bl	8000a68 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e14d      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a0 	beq.w	80014fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x2b8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d121      	bne.n	800143e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_RCC_OscConfig+0x2b8>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb2f 	bl	8000a68 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e011      	b.n	8001432 <HAL_RCC_OscConfig+0x2ce>
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
 800141c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001420:	f7ff fb22 	bl	8000a68 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e106      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_RCC_OscConfig+0x4e4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x2f0>
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a80      	ldr	r2, [pc, #512]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	e01c      	b.n	800148e <HAL_RCC_OscConfig+0x32a>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x312>
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a7a      	ldr	r2, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a77      	ldr	r2, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	e00b      	b.n	800148e <HAL_RCC_OscConfig+0x32a>
 8001476:	4b75      	ldr	r3, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a74      	ldr	r2, [pc, #464]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	4b72      	ldr	r3, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a71      	ldr	r2, [pc, #452]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d015      	beq.n	80014c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fae7 	bl	8000a68 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff fae3 	bl	8000a68 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0c5      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0ee      	beq.n	800149e <HAL_RCC_OscConfig+0x33a>
 80014c0:	e014      	b.n	80014ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fad1 	bl	8000a68 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff facd 	bl	8000a68 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0af      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	4b5a      	ldr	r3, [pc, #360]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ee      	bne.n	80014ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a55      	ldr	r2, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 809b 	beq.w	800163e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	d05c      	beq.n	80015ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d141      	bne.n	80015a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x4ec>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff faa1 	bl	8000a68 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fa9d 	bl	8000a68 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e081      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	019b      	lsls	r3, r3, #6
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_RCC_OscConfig+0x4ec>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fa76 	bl	8000a68 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fa72 	bl	8000a68 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e056      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x41c>
 800159e:	e04e      	b.n	800163e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fa5f 	bl	8000a68 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fa5b 	bl	8000a68 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e03f      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x44a>
 80015cc:	e037      	b.n	800163e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e032      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d028      	beq.n	800163a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d121      	bne.n	800163a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d11a      	bne.n	800163a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001610:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001612:	4293      	cmp	r3, r2
 8001614:	d111      	bne.n	800163a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3b01      	subs	r3, #1
 8001624:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d107      	bne.n	800163a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40007000 	.word	0x40007000
 800164c:	40023800 	.word	0x40023800
 8001650:	42470060 	.word	0x42470060

08001654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0cc      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d90c      	bls.n	8001690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b8      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	494d      	ldr	r1, [pc, #308]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d044      	beq.n	8001774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d119      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e07f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d003      	beq.n	8001712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	2b03      	cmp	r3, #3
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e067      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f023 0203 	bic.w	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4934      	ldr	r1, [pc, #208]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001744:	f7ff f990 	bl	8000a68 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	e00a      	b.n	8001762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff f98c 	bl	8000a68 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e04f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 020c 	and.w	r2, r3, #12
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d1eb      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d20c      	bcs.n	800179c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e032      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017da:	f000 f821 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	5ccb      	ldrb	r3, [r1, r3]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8f0 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00
 8001810:	40023800 	.word	0x40023800
 8001814:	08002938 	.word	0x08002938
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001826:	2100      	movs	r1, #0
 8001828:	6079      	str	r1, [r7, #4]
 800182a:	2100      	movs	r1, #0
 800182c:	60f9      	str	r1, [r7, #12]
 800182e:	2100      	movs	r1, #0
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001832:	2100      	movs	r1, #0
 8001834:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001836:	4952      	ldr	r1, [pc, #328]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 8001838:	6889      	ldr	r1, [r1, #8]
 800183a:	f001 010c 	and.w	r1, r1, #12
 800183e:	2908      	cmp	r1, #8
 8001840:	d00d      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x3e>
 8001842:	2908      	cmp	r1, #8
 8001844:	f200 8094 	bhi.w	8001970 <HAL_RCC_GetSysClockFreq+0x150>
 8001848:	2900      	cmp	r1, #0
 800184a:	d002      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x32>
 800184c:	2904      	cmp	r1, #4
 800184e:	d003      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x38>
 8001850:	e08e      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_GetSysClockFreq+0x164>)
 8001854:	60bb      	str	r3, [r7, #8]
       break;
 8001856:	e08e      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_RCC_GetSysClockFreq+0x168>)
 800185a:	60bb      	str	r3, [r7, #8]
      break;
 800185c:	e08b      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185e:	4948      	ldr	r1, [pc, #288]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 8001860:	6849      	ldr	r1, [r1, #4]
 8001862:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001866:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001868:	4945      	ldr	r1, [pc, #276]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 800186a:	6849      	ldr	r1, [r1, #4]
 800186c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001870:	2900      	cmp	r1, #0
 8001872:	d024      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001874:	4942      	ldr	r1, [pc, #264]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 8001876:	6849      	ldr	r1, [r1, #4]
 8001878:	0989      	lsrs	r1, r1, #6
 800187a:	4608      	mov	r0, r1
 800187c:	f04f 0100 	mov.w	r1, #0
 8001880:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001884:	f04f 0500 	mov.w	r5, #0
 8001888:	ea00 0204 	and.w	r2, r0, r4
 800188c:	ea01 0305 	and.w	r3, r1, r5
 8001890:	493d      	ldr	r1, [pc, #244]	; (8001988 <HAL_RCC_GetSysClockFreq+0x168>)
 8001892:	fb01 f003 	mul.w	r0, r1, r3
 8001896:	2100      	movs	r1, #0
 8001898:	fb01 f102 	mul.w	r1, r1, r2
 800189c:	1844      	adds	r4, r0, r1
 800189e:	493a      	ldr	r1, [pc, #232]	; (8001988 <HAL_RCC_GetSysClockFreq+0x168>)
 80018a0:	fba2 0101 	umull	r0, r1, r2, r1
 80018a4:	1863      	adds	r3, r4, r1
 80018a6:	4619      	mov	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f7fe fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e04a      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	ea02 0400 	and.w	r4, r2, r0
 80018d6:	ea03 0501 	and.w	r5, r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ec:	0142      	lsls	r2, r0, #5
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	1b00      	subs	r0, r0, r4
 80018f4:	eb61 0105 	sbc.w	r1, r1, r5
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	018b      	lsls	r3, r1, #6
 8001902:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001906:	0182      	lsls	r2, r0, #6
 8001908:	1a12      	subs	r2, r2, r0
 800190a:	eb63 0301 	sbc.w	r3, r3, r1
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	00d9      	lsls	r1, r3, #3
 8001918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800191c:	00d0      	lsls	r0, r2, #3
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	1912      	adds	r2, r2, r4
 8001924:	eb45 0303 	adc.w	r3, r5, r3
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	0299      	lsls	r1, r3, #10
 8001932:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001936:	0290      	lsls	r0, r2, #10
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	461a      	mov	r2, r3
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f7fe fc3e 	bl	80001c8 <__aeabi_uldivmod>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4613      	mov	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_GetSysClockFreq+0x160>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	3301      	adds	r3, #1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_RCC_GetSysClockFreq+0x164>)
 8001972:	60bb      	str	r3, [r7, #8]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	68bb      	ldr	r3, [r7, #8]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	017d7840 	.word	0x017d7840

0800198c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a8:	f7ff fff0 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08002948 	.word	0x08002948

080019cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d0:	f7ff ffdc 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0b5b      	lsrs	r3, r3, #13
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4903      	ldr	r1, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08002948 	.word	0x08002948

080019f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03f      	b.n	8001a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe feb2 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fd7b 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b08a      	sub	sp, #40	; 0x28
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d17c      	bne.n	8001ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_Transmit+0x2c>
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e075      	b.n	8001baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Transmit+0x3e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e06e      	b.n	8001baa <HAL_UART_Transmit+0x11c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2221      	movs	r2, #33	; 0x21
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae2:	f7fe ffc1 	bl	8000a68 <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afc:	d108      	bne.n	8001b10 <HAL_UART_Transmit+0x82>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e003      	b.n	8001b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b20:	e02a      	b.n	8001b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 faf9 	bl	8002124 <UART_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e036      	b.n	8001baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	3302      	adds	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e007      	b.n	8001b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cf      	bne.n	8001b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fac9 	bl	8002124 <UART_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0ba      	sub	sp, #232	; 0xe8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_UART_IRQHandler+0x66>
 8001c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fbd3 	bl	80023be <UART_Receive_IT>
      return;
 8001c18:	e256      	b.n	80020c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80de 	beq.w	8001de0 <HAL_UART_IRQHandler+0x22c>
 8001c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80d1 	beq.w	8001de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_UART_IRQHandler+0xae>
 8001c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_UART_IRQHandler+0xd2>
 8001c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f043 0202 	orr.w	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_UART_IRQHandler+0xf6>
 8001c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f043 0204 	orr.w	r2, r3, #4
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d011      	beq.n	8001cda <HAL_UART_IRQHandler+0x126>
 8001cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f043 0208 	orr.w	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81ed 	beq.w	80020be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_UART_IRQHandler+0x14e>
 8001cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fb5e 	bl	80023be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <HAL_UART_IRQHandler+0x17a>
 8001d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04f      	beq.n	8001dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa66 	bl	8002200 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d141      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3314      	adds	r3, #20
 8001d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d50:	e853 3f00 	ldrex	r3, [r3]
 8001d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3314      	adds	r3, #20
 8001d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d7e:	e841 2300 	strex	r3, r2, [r1]
 8001d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1d9      	bne.n	8001d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d013      	beq.n	8001dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	4a7d      	ldr	r2, [pc, #500]	; (8001f90 <HAL_UART_IRQHandler+0x3dc>)
 8001d9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f81f 	bl	8000de6 <HAL_DMA_Abort_IT>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db8:	4610      	mov	r0, r2
 8001dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	e00e      	b.n	8001ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f99a 	bl	80020f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc4:	e00a      	b.n	8001ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f996 	bl	80020f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dcc:	e006      	b.n	8001ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f992 	bl	80020f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001dda:	e170      	b.n	80020be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ddc:	bf00      	nop
    return;
 8001dde:	e16e      	b.n	80020be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f040 814a 	bne.w	800207e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8143 	beq.w	800207e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 813c 	beq.w	800207e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	f040 80b4 	bne.w	8001f94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8140 	beq.w	80020c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	f080 8139 	bcs.w	80020c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e62:	f000 8088 	beq.w	8001f76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	330c      	adds	r3, #12
 8001e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e74:	e853 3f00 	ldrex	r3, [r3]
 8001e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ea2:	e841 2300 	strex	r3, r2, [r1]
 8001ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1d9      	bne.n	8001e66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3314      	adds	r3, #20
 8001eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ebc:	e853 3f00 	ldrex	r3, [r3]
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ee2:	e841 2300 	strex	r3, r2, [r1]
 8001ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e1      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3314      	adds	r3, #20
 8001ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f1a:	e841 2300 	strex	r3, r2, [r1]
 8001f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e3      	bne.n	8001eee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3e:	e853 3f00 	ldrex	r3, [r3]
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	f023 0310 	bic.w	r3, r3, #16
 8001f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f60:	e841 2300 	strex	r3, r2, [r1]
 8001f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e3      	bne.n	8001f34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fec8 	bl	8000d06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4619      	mov	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c0 	bl	800210c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f8c:	e099      	b.n	80020c2 <HAL_UART_IRQHandler+0x50e>
 8001f8e:	bf00      	nop
 8001f90:	080022c7 	.word	0x080022c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 808b 	beq.w	80020c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8086 	beq.w	80020c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	330c      	adds	r3, #12
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc4:	e853 3f00 	ldrex	r3, [r3]
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	330c      	adds	r3, #12
 8001fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fde:	647a      	str	r2, [r7, #68]	; 0x44
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fe6:	e841 2300 	strex	r3, r2, [r1]
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e3      	bne.n	8001fba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	e853 3f00 	ldrex	r3, [r3]
 8002000:	623b      	str	r3, [r7, #32]
   return(result);
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3314      	adds	r3, #20
 8002012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002016:	633a      	str	r2, [r7, #48]	; 0x30
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201e:	e841 2300 	strex	r3, r2, [r1]
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e3      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	330c      	adds	r3, #12
 800203e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	e853 3f00 	ldrex	r3, [r3]
 8002046:	60fb      	str	r3, [r7, #12]
   return(result);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0310 	bic.w	r3, r3, #16
 800204e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800205c:	61fa      	str	r2, [r7, #28]
 800205e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002060:	69b9      	ldr	r1, [r7, #24]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	e841 2300 	strex	r3, r2, [r1]
 8002068:	617b      	str	r3, [r7, #20]
   return(result);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e3      	bne.n	8002038 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f848 	bl	800210c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800207c:	e023      	b.n	80020c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_UART_IRQHandler+0x4ea>
 800208a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f929 	bl	80022ee <UART_Transmit_IT>
    return;
 800209c:	e014      	b.n	80020c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00e      	beq.n	80020c8 <HAL_UART_IRQHandler+0x514>
 80020aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f969 	bl	800238e <UART_EndTransmit_IT>
    return;
 80020bc:	e004      	b.n	80020c8 <HAL_UART_IRQHandler+0x514>
    return;
 80020be:	bf00      	nop
 80020c0:	e002      	b.n	80020c8 <HAL_UART_IRQHandler+0x514>
      return;
 80020c2:	bf00      	nop
 80020c4:	e000      	b.n	80020c8 <HAL_UART_IRQHandler+0x514>
      return;
 80020c6:	bf00      	nop
  }
}
 80020c8:	37e8      	adds	r7, #232	; 0xe8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop

080020d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b090      	sub	sp, #64	; 0x40
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002134:	e050      	b.n	80021d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d04c      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800213e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <UART_WaitOnFlagUntilTimeout+0x30>
 8002144:	f7fe fc90 	bl	8000a68 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002150:	429a      	cmp	r2, r3
 8002152:	d241      	bcs.n	80021d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	e853 3f00 	ldrex	r3, [r3]
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	330c      	adds	r3, #12
 8002172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002174:	637a      	str	r2, [r7, #52]	; 0x34
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800217a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800217c:	e841 2300 	strex	r3, r2, [r1]
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e5      	bne.n	8002154 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3314      	adds	r3, #20
 800218e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	e853 3f00 	ldrex	r3, [r3]
 8002196:	613b      	str	r3, [r7, #16]
   return(result);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a8:	623a      	str	r2, [r7, #32]
 80021aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ac:	69f9      	ldr	r1, [r7, #28]
 80021ae:	6a3a      	ldr	r2, [r7, #32]
 80021b0:	e841 2300 	strex	r3, r2, [r1]
 80021b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e5      	bne.n	8002188 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e00f      	b.n	80021f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d09f      	beq.n	8002136 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3740      	adds	r7, #64	; 0x40
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002200:	b480      	push	{r7}
 8002202:	b095      	sub	sp, #84	; 0x54
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	330c      	adds	r3, #12
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002228:	643a      	str	r2, [r7, #64]	; 0x40
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800222e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002230:	e841 2300 	strex	r3, r2, [r1]
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	e853 3f00 	ldrex	r3, [r3]
 800224a:	61fb      	str	r3, [r7, #28]
   return(result);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3314      	adds	r3, #20
 800225a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800225c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	d119      	bne.n	80022ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e853 3f00 	ldrex	r3, [r3]
 8002286:	60bb      	str	r3, [r7, #8]
   return(result);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 0310 	bic.w	r3, r3, #16
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002298:	61ba      	str	r2, [r7, #24]
 800229a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	e841 2300 	strex	r3, r2, [r1]
 80022a4:	613b      	str	r3, [r7, #16]
   return(result);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e5      	bne.n	8002278 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022ba:	bf00      	nop
 80022bc:	3754      	adds	r7, #84	; 0x54
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff ff09 	bl	80020f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b21      	cmp	r3, #33	; 0x21
 8002300:	d13e      	bne.n	8002380 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230a:	d114      	bne.n	8002336 <UART_Transmit_IT+0x48>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d110      	bne.n	8002336 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002328:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	1c9a      	adds	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	e008      	b.n	8002348 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	1c59      	adds	r1, r3, #1
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6211      	str	r1, [r2, #32]
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29b      	uxth	r3, r3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4619      	mov	r1, r3
 8002356:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	e000      	b.n	8002382 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002380:	2302      	movs	r3, #2
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe8e 	bl	80020d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b08c      	sub	sp, #48	; 0x30
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b22      	cmp	r3, #34	; 0x22
 80023d0:	f040 80ab 	bne.w	800252a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d117      	bne.n	800240e <UART_Receive_IT+0x50>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	1c9a      	adds	r2, r3, #2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e026      	b.n	800245c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002420:	d007      	beq.n	8002432 <UART_Receive_IT+0x74>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <UART_Receive_IT+0x82>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e008      	b.n	8002452 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800246c:	2b00      	cmp	r3, #0
 800246e:	d15a      	bne.n	8002526 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0220 	bic.w	r2, r2, #32
 800247e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d135      	bne.n	800251c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	613b      	str	r3, [r7, #16]
   return(result);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f023 0310 	bic.w	r3, r3, #16
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	623a      	str	r2, [r7, #32]
 80024d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	69f9      	ldr	r1, [r7, #28]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e5      	bne.n	80024b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d10a      	bne.n	800250e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fdf9 	bl	800210c <HAL_UARTEx_RxEventCallback>
 800251a:	e002      	b.n	8002522 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fde1 	bl	80020e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e002      	b.n	800252c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	b09f      	sub	sp, #124	; 0x7c
 800253a:	af00      	add	r7, sp, #0
 800253c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	ea40 0301 	orr.w	r3, r0, r1
 8002554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	431a      	orrs	r2, r3
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4313      	orrs	r3, r2
 800256c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002578:	f021 010c 	bic.w	r1, r1, #12
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	430b      	orrs	r3, r1
 8002584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	6999      	ldr	r1, [r3, #24]
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	ea40 0301 	orr.w	r3, r0, r1
 800259c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4bc5      	ldr	r3, [pc, #788]	; (80028b8 <UART_SetConfig+0x384>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d004      	beq.n	80025b2 <UART_SetConfig+0x7e>
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4bc3      	ldr	r3, [pc, #780]	; (80028bc <UART_SetConfig+0x388>)
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d103      	bne.n	80025ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b2:	f7ff fa0b 	bl	80019cc <HAL_RCC_GetPCLK2Freq>
 80025b6:	6778      	str	r0, [r7, #116]	; 0x74
 80025b8:	e002      	b.n	80025c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ba:	f7ff f9f3 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 80025be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c8:	f040 80b6 	bne.w	8002738 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ce:	461c      	mov	r4, r3
 80025d0:	f04f 0500 	mov.w	r5, #0
 80025d4:	4622      	mov	r2, r4
 80025d6:	462b      	mov	r3, r5
 80025d8:	1891      	adds	r1, r2, r2
 80025da:	6439      	str	r1, [r7, #64]	; 0x40
 80025dc:	415b      	adcs	r3, r3
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025e4:	1912      	adds	r2, r2, r4
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	00d9      	lsls	r1, r3, #3
 80025f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025f8:	00d0      	lsls	r0, r2, #3
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	1911      	adds	r1, r2, r4
 8002600:	6639      	str	r1, [r7, #96]	; 0x60
 8002602:	416b      	adcs	r3, r5
 8002604:	667b      	str	r3, [r7, #100]	; 0x64
 8002606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	1891      	adds	r1, r2, r2
 8002612:	63b9      	str	r1, [r7, #56]	; 0x38
 8002614:	415b      	adcs	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800261c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002620:	f7fd fdd2 	bl	80001c8 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4ba5      	ldr	r3, [pc, #660]	; (80028c0 <UART_SetConfig+0x38c>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011e      	lsls	r6, r3, #4
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	461c      	mov	r4, r3
 8002636:	f04f 0500 	mov.w	r5, #0
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6339      	str	r1, [r7, #48]	; 0x30
 8002642:	415b      	adcs	r3, r3
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800264a:	1912      	adds	r2, r2, r4
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	f04f 0000 	mov.w	r0, #0
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	00d9      	lsls	r1, r3, #3
 800265a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800265e:	00d0      	lsls	r0, r2, #3
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	1911      	adds	r1, r2, r4
 8002666:	65b9      	str	r1, [r7, #88]	; 0x58
 8002668:	416b      	adcs	r3, r5
 800266a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	461a      	mov	r2, r3
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	1891      	adds	r1, r2, r2
 8002678:	62b9      	str	r1, [r7, #40]	; 0x28
 800267a:	415b      	adcs	r3, r3
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002682:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002686:	f7fd fd9f 	bl	80001c8 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <UART_SetConfig+0x38c>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <UART_SetConfig+0x38c>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b0:	441e      	add	r6, r3
 80026b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b4:	4618      	mov	r0, r3
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	1894      	adds	r4, r2, r2
 80026c0:	623c      	str	r4, [r7, #32]
 80026c2:	415b      	adcs	r3, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ca:	1812      	adds	r2, r2, r0
 80026cc:	eb41 0303 	adc.w	r3, r1, r3
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	f04f 0500 	mov.w	r5, #0
 80026d8:	00dd      	lsls	r5, r3, #3
 80026da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026de:	00d4      	lsls	r4, r2, #3
 80026e0:	4622      	mov	r2, r4
 80026e2:	462b      	mov	r3, r5
 80026e4:	1814      	adds	r4, r2, r0
 80026e6:	653c      	str	r4, [r7, #80]	; 0x50
 80026e8:	414b      	adcs	r3, r1
 80026ea:	657b      	str	r3, [r7, #84]	; 0x54
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	61b9      	str	r1, [r7, #24]
 80026fa:	415b      	adcs	r3, r3
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002702:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002706:	f7fd fd5f 	bl	80001c8 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <UART_SetConfig+0x38c>)
 8002710:	fba3 1302 	umull	r1, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	2164      	movs	r1, #100	; 0x64
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	3332      	adds	r3, #50	; 0x32
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <UART_SetConfig+0x38c>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	f003 0207 	and.w	r2, r3, #7
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4432      	add	r2, r6
 8002734:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002736:	e0b9      	b.n	80028ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	461c      	mov	r4, r3
 800273c:	f04f 0500 	mov.w	r5, #0
 8002740:	4622      	mov	r2, r4
 8002742:	462b      	mov	r3, r5
 8002744:	1891      	adds	r1, r2, r2
 8002746:	6139      	str	r1, [r7, #16]
 8002748:	415b      	adcs	r3, r3
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002750:	1912      	adds	r2, r2, r4
 8002752:	eb45 0303 	adc.w	r3, r5, r3
 8002756:	f04f 0000 	mov.w	r0, #0
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	00d9      	lsls	r1, r3, #3
 8002760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002764:	00d0      	lsls	r0, r2, #3
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	eb12 0804 	adds.w	r8, r2, r4
 800276e:	eb43 0905 	adc.w	r9, r3, r5
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	008b      	lsls	r3, r1, #2
 8002786:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800278a:	0082      	lsls	r2, r0, #2
 800278c:	4640      	mov	r0, r8
 800278e:	4649      	mov	r1, r9
 8002790:	f7fd fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <UART_SetConfig+0x38c>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011e      	lsls	r6, r3, #4
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	4618      	mov	r0, r3
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	1894      	adds	r4, r2, r2
 80027b0:	60bc      	str	r4, [r7, #8]
 80027b2:	415b      	adcs	r3, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ba:	1812      	adds	r2, r2, r0
 80027bc:	eb41 0303 	adc.w	r3, r1, r3
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	f04f 0500 	mov.w	r5, #0
 80027c8:	00dd      	lsls	r5, r3, #3
 80027ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027ce:	00d4      	lsls	r4, r2, #3
 80027d0:	4622      	mov	r2, r4
 80027d2:	462b      	mov	r3, r5
 80027d4:	1814      	adds	r4, r2, r0
 80027d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80027d8:	414b      	adcs	r3, r1
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	008b      	lsls	r3, r1, #2
 80027f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027f4:	0082      	lsls	r2, r0, #2
 80027f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027fa:	f7fd fce5 	bl	80001c8 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <UART_SetConfig+0x38c>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <UART_SetConfig+0x38c>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002822:	441e      	add	r6, r3
 8002824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002826:	4618      	mov	r0, r3
 8002828:	f04f 0100 	mov.w	r1, #0
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	1894      	adds	r4, r2, r2
 8002832:	603c      	str	r4, [r7, #0]
 8002834:	415b      	adcs	r3, r3
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283c:	1812      	adds	r2, r2, r0
 800283e:	eb41 0303 	adc.w	r3, r1, r3
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	f04f 0500 	mov.w	r5, #0
 800284a:	00dd      	lsls	r5, r3, #3
 800284c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002850:	00d4      	lsls	r4, r2, #3
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	eb12 0a00 	adds.w	sl, r2, r0
 800285a:	eb43 0b01 	adc.w	fp, r3, r1
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	008b      	lsls	r3, r1, #2
 8002872:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002876:	0082      	lsls	r2, r0, #2
 8002878:	4650      	mov	r0, sl
 800287a:	4659      	mov	r1, fp
 800287c:	f7fd fca4 	bl	80001c8 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <UART_SetConfig+0x38c>)
 8002886:	fba3 1302 	umull	r1, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2164      	movs	r1, #100	; 0x64
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <UART_SetConfig+0x38c>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4432      	add	r2, r6
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	377c      	adds	r7, #124	; 0x7c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f

080028c4 <__libc_init_array>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	4d0d      	ldr	r5, [pc, #52]	; (80028fc <__libc_init_array+0x38>)
 80028c8:	4c0d      	ldr	r4, [pc, #52]	; (8002900 <__libc_init_array+0x3c>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	2600      	movs	r6, #0
 80028d0:	42a6      	cmp	r6, r4
 80028d2:	d109      	bne.n	80028e8 <__libc_init_array+0x24>
 80028d4:	4d0b      	ldr	r5, [pc, #44]	; (8002904 <__libc_init_array+0x40>)
 80028d6:	4c0c      	ldr	r4, [pc, #48]	; (8002908 <__libc_init_array+0x44>)
 80028d8:	f000 f820 	bl	800291c <_init>
 80028dc:	1b64      	subs	r4, r4, r5
 80028de:	10a4      	asrs	r4, r4, #2
 80028e0:	2600      	movs	r6, #0
 80028e2:	42a6      	cmp	r6, r4
 80028e4:	d105      	bne.n	80028f2 <__libc_init_array+0x2e>
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ec:	4798      	blx	r3
 80028ee:	3601      	adds	r6, #1
 80028f0:	e7ee      	b.n	80028d0 <__libc_init_array+0xc>
 80028f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f6:	4798      	blx	r3
 80028f8:	3601      	adds	r6, #1
 80028fa:	e7f2      	b.n	80028e2 <__libc_init_array+0x1e>
 80028fc:	08002958 	.word	0x08002958
 8002900:	08002958 	.word	0x08002958
 8002904:	08002958 	.word	0x08002958
 8002908:	0800295c 	.word	0x0800295c

0800290c <memset>:
 800290c:	4402      	add	r2, r0
 800290e:	4603      	mov	r3, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
